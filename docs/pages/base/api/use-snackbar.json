{
  "parameters": {
    "autoHideDuration": {
      "type": {
        "name": "number | null",
        "description": "The number of milliseconds to wait before automatically calling the\n`onClose` function. `onClose` should then set the state of the `open`\nprop to hide the Snackbar. This behavior is disabled by default with\nthe `null` value."
      },
      "default": "null"
    },
    "disableWindowBlurListener": {
      "type": {
        "name": "boolean",
        "description": "If `true`, the `autoHideDuration` timer will expire even if the window is not focused."
      },
      "default": "false"
    },
    "onClose": {
      "type": {
        "name": "(event: React.SyntheticEvent<any> | Event | null, reason: SnackbarCloseReason) => void",
        "description": "Callback fired when the component requests to be closed.\nTypically `onClose` is used to set state in the parent component,\nwhich is used to control the `Snackbar` `open` prop.\nThe `reason` parameter can optionally be used to control the response to `onClose`,\nfor example ignoring `clickaway`."
      }
    },
    "open": { "type": { "name": "boolean", "description": "If `true`, the component is shown." } },
    "ref": { "type": { "name": "React.Ref<any>", "description": "" } },
    "resumeHideDuration": {
      "type": {
        "name": "number",
        "description": "The number of milliseconds to wait before dismissing after user interaction.\nIf `autoHideDuration` prop isn't specified, it does nothing.\nIf `autoHideDuration` prop is specified but `resumeHideDuration` isn't,\nwe default to `autoHideDuration / 2` ms."
      }
    }
  },
  "returnValue": {},
  "name": "useSnackbar",
  "filename": "/packages/mui-base/src/SnackbarUnstyled/useSnackbar.ts",
  "demos": "<ul><li><a href=\"/base/react-snackbar/#hook\">Unstyled Snackbar</a></li></ul>"
}
