{
  "Accordion": {
    "children": "The content of the accordion.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "defaultExpanded": "If `true`, expands the accordion by default.",
    "disabled": "If `true`, the accordion is displayed in a disabled state.",
    "expanded": "If `true`, expands the accordion, otherwise collapse it.\nSetting this prop enables control over the accordion.",
    "onChange": "Callback fired when the expand/collapse state is changed.\n\n@param {object} event The event source of the callback. **Warning**: This is a generic event not a change event.\n@param {boolean} expanded The `expanded` state of the accordion.",
    "square": "If `true`, rounded corners are disabled.",
    "TransitionComponent": "The component used for the transition.\n[Follow this guide](/components/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.",
    "TransitionProps": "Props applied to the transition element.\nBy default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition) component."
  },
  "AccordionActions": {
    "children": "The content of the component.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "disableSpacing": "If `true`, the actions do not have additional margin."
  },
  "AccordionDetails": {
    "children": "The content of the accordion details.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details."
  },
  "AccordionSummary": {
    "children": "The content of the accordion summary.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "expandIcon": "The icon to display as the expand indicator.",
    "focusVisibleClassName": "This prop can help a person know which element has the keyboard focus.\nThe class name will be applied when the element gain the focus through a keyboard interaction.\nIt's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).\nThe rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/master/explainer.md).\nA [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components\nif needed."
  },
  "Alert": {
    "action": "The action to display. It renders after the message, at the end of the alert.",
    "children": "The content of the component.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "closeText": "Override the default label for the *close popup* icon button.\n\nFor localization purposes, you can use the provided [translations](/guides/localization/).",
    "color": "The main color for the alert. Unless provided, the value is taken from the `severity` prop.",
    "icon": "Override the icon displayed before the children.\nUnless provided, the icon is mapped to the value of the `severity` prop.",
    "iconMapping": "The component maps the `severity` prop to a range of different icons,\nfor instance success to `<SuccessOutlined>`.\nIf you wish to change this mapping, you can provide your own.\nAlternatively, you can use the `icon` prop to override the icon displayed.",
    "onClose": "Callback fired when the component requests to be closed.\nWhen provided and no `action` prop is set, a close icon button is displayed that triggers the callback when clicked.\n\n@param {object} event The event source of the callback.",
    "role": "The ARIA role attribute of the element.",
    "severity": "The severity of the alert. This defines the color and icon used.",
    "variant": "The variant to use."
  },
  "AlertTitle": {
    "children": "The content of the component.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details."
  },
  "AppBar": {
    "children": "The content of the component.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "color": "The color of the component. It supports those theme colors that make sense for this component.",
    "position": "The positioning type. The behavior of the different options is described\n[in the MDN web docs](https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Positioning).\nNote: `sticky` is not universally supported and will fall back to `static` when unavailable."
  },
  "Autocomplete": {
    "autoComplete": "If `true`, the portion of the selected suggestion that has not been typed by the user,\nknown as the completion string, appears inline after the input cursor in the textbox.\nThe inline completion string is visually highlighted and has a selected state.",
    "autoHighlight": "If `true`, the first option is automatically highlighted.",
    "autoSelect": "If `true`, the selected option becomes the value of the input\nwhen the Autocomplete loses focus unless the user chooses\na different option or changes the character string in the input.",
    "blurOnSelect": "Control if the input should be blurred when an option is selected:\n\n- `false` the input is not blurred.\n- `true` the input is always blurred.\n- `touch` the input is blurred after a touch event.\n- `mouse` the input is blurred after a mouse event.",
    "ChipProps": "Props applied to the [`Chip`](/api/chip/) element.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "clearOnBlur": "If `true`, the input's text is cleared on blur if no value is selected.\n\nSet to `true` if you want to help the user enter a new value.\nSet to `false` if you want to help the user resume his search.",
    "clearOnEscape": "If `true`, clear all values when the user presses escape and the popup is closed.",
    "clearText": "Override the default text for the *clear* icon button.\n\nFor localization purposes, you can use the provided [translations](/guides/localization/).",
    "closeIcon": "The icon to display in place of the default close icon.",
    "closeText": "Override the default text for the *close popup* icon button.\n\nFor localization purposes, you can use the provided [translations](/guides/localization/).",
    "defaultValue": "The default input value. Use when the component is not controlled.",
    "disableClearable": "If `true`, the input can't be cleared.",
    "disableCloseOnSelect": "If `true`, the popup won't close when a value is selected.",
    "disabled": "If `true`, the input is disabled.",
    "disabledItemsFocusable": "If `true`, will allow focus on disabled items.",
    "disableListWrap": "If `true`, the list box in the popup will not wrap focus.",
    "disablePortal": "The `Popper` content will be inside the DOM hierarchy of the parent component.",
    "filterOptions": "A filter function that determines the options that are eligible.\n\n@param {T[]} options The options to render.\n@param {object} state The state of the component.\n@returns {T[]}",
    "filterSelectedOptions": "If `true`, hide the selected options from the list box.",
    "forcePopupIcon": "Force the visibility display of the popup icon.",
    "freeSolo": "If `true`, the Autocomplete is free solo, meaning that the user input is not bound to provided options.",
    "fullWidth": "If `true`, the input will take up the full width of its container.",
    "getLimitTagsText": "The label to display when the tags are truncated (`limitTags`).\n\n@param {number} more The number of truncated tags.\n@returns {ReactNode}",
    "getOptionDisabled": "Used to determine the disabled state for a given option.\n\n@param {T} option The option to test.\n@returns {boolean}",
    "getOptionLabel": "Used to determine the string value for a given option.\nIt's used to fill the input (and the list box options if `renderOption` is not provided).\n\n@param {T} option\n@returns {string}",
    "getOptionSelected": "Used to determine if an option is selected, considering the current value.\nUses strict equality by default.\n\n@param {T} option The option to test.\n@param {T} value The value to test against.\n@returns {boolean}",
    "groupBy": "If provided, the options will be grouped under the returned string.\nThe groupBy value is also used as the text for group headings when `renderGroup` is not provided.\n\n@param {T} options The options to group.\n@returns {string}",
    "handleHomeEndKeys": "If `true`, the component handles the \"Home\" and \"End\" keys when the popup is open.\nIt should move focus to the first option and last option, respectively.",
    "id": "This prop is used to help implement the accessibility logic.\nIf you don't provide this prop. It falls back to a randomly generated id.",
    "includeInputInList": "If `true`, the highlight can move to the input.",
    "inputValue": "The input value.",
    "limitTags": "The maximum number of tags that will be visible when not focused.\nSet `-1` to disable the limit.",
    "ListboxComponent": "The component used to render the listbox.",
    "ListboxProps": "Props applied to the Listbox element.",
    "loading": "If `true`, the component is in a loading state.",
    "loadingText": "Text to display when in a loading state.\n\nFor localization purposes, you can use the provided [translations](/guides/localization/).",
    "multiple": "If `true`, `value` must be an array and the menu will support multiple selections.",
    "noOptionsText": "Text to display when there are no options.\n\nFor localization purposes, you can use the provided [translations](/guides/localization/).",
    "onChange": "Callback fired when the value changes.\n\n@param {object} event The event source of the callback.\n@param {T|T[]} value The new value of the component.\n@param {string} reason One of \"create-option\", \"select-option\", \"remove-option\", \"blur\" or \"clear\".",
    "onClose": "Callback fired when the popup requests to be closed.\nUse in controlled mode (see open).\n\n@param {object} event The event source of the callback.\n@param {string} reason Can be: `\"toggleInput\"`, `\"escape\"`, `\"select-option\"`, `\"remove-option\"`, `\"blur\"`.",
    "onHighlightChange": "Callback fired when the highlight option changes.\n\n@param {object} event The event source of the callback.\n@param {T} option The highlighted option.\n@param {string} reason Can be: `\"keyboard\"`, `\"auto\"`, `\"mouse\"`.",
    "onInputChange": "Callback fired when the input value changes.\n\n@param {object} event The event source of the callback.\n@param {string} value The new value of the text input.\n@param {string} reason Can be: `\"input\"` (user input), `\"reset\"` (programmatic change), `\"clear\"`.",
    "onOpen": "Callback fired when the popup requests to be opened.\nUse in controlled mode (see open).\n\n@param {object} event The event source of the callback.",
    "open": "Control the popup` open state.",
    "openOnFocus": "If `true`, the popup will open on input focus.",
    "openText": "Override the default text for the *open popup* icon button.\n\nFor localization purposes, you can use the provided [translations](/guides/localization/).",
    "options": "Array of options.",
    "PaperComponent": "The component used to render the body of the popup.",
    "PopperComponent": "The component used to position the popup.",
    "popupIcon": "The icon to display in place of the default popup icon.",
    "renderGroup": "Render the group.\n\n@param {any} option The group to render.\n@returns {ReactNode}",
    "renderInput": "Render the input.\n\n@param {object} params\n@returns {ReactNode}",
    "renderOption": "Render the option, use `getOptionLabel` by default.\n\n@param {object} props The props to apply on the li element.\n@param {T} option The option to render.\n@param {object} state The state of the component.\n@returns {ReactNode}",
    "renderTags": "Render the selected value.\n\n@param {T[]} value The `value` provided to the component.\n@param {function} getTagProps A tag props getter.\n@returns {ReactNode}",
    "selectOnFocus": "If `true`, the input's text is selected on focus.\nIt helps the user clear the selected value.",
    "size": "The size of the autocomplete.",
    "value": "The value of the autocomplete.\n\nThe value must have reference equality with the option in order to be selected.\nYou can customize the equality behavior with the `getOptionSelected` prop."
  },
  "Avatar": {
    "alt": "Used in combination with `src` or `srcSet` to\nprovide an alt attribute for the rendered `img` element.",
    "children": "Used to render icon or text elements inside the Avatar if `src` is not set.\nThis can be an element, or just a string.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "component": "The component used for the root node.\nEither a string to use a HTML element or a component.",
    "imgProps": "Attributes applied to the `img` element if the component is used to display an image.\nIt can be used to listen for the loading error event.",
    "sizes": "The `sizes` attribute for the `img` element.",
    "src": "The `src` attribute for the `img` element.",
    "srcSet": "The `srcSet` attribute for the `img` element.\nUse this attribute for responsive image display.",
    "variant": "The shape of the avatar."
  },
  "AvatarGroup": {
    "children": "The avatars to stack.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "max": "Max avatars to show before +x.",
    "spacing": "Spacing between avatars.",
    "variant": "The shape of the avatars."
  },
  "Backdrop": {
    "children": "The content of the component.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "invisible": "If `true`, the backdrop is invisible.\nIt can be used when rendering a popover or a custom select component.",
    "open": "If `true`, the backdrop is open.",
    "transitionDuration": "The duration for the transition, in milliseconds.\nYou may specify a single timeout for all transitions, or individually with an object."
  },
  "Badge": {
    "anchorOrigin": "The anchor of the badge.\n@default {\n  vertical: 'top',\n  horizontal: 'right',\n}",
    "badgeContent": "The content rendered within the badge.",
    "children": "The badge will be added relative to this node.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "color": "The color of the component. It supports those theme colors that make sense for this component.",
    "component": "The component used for the root node.\nEither a string to use a HTML element or a component.",
    "invisible": "If `true`, the badge is invisible.",
    "max": "Max count to show.",
    "overlap": "Wrapped shape the badge should overlap.",
    "showZero": "Controls whether the badge is hidden when `badgeContent` is zero.",
    "variant": "The variant to use."
  },
  "BottomNavigation": {
    "children": "The content of the component.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "component": "The component used for the root node.\nEither a string to use a HTML element or a component.",
    "onChange": "Callback fired when the value changes.\n\n@param {object} event The event source of the callback. **Warning**: This is a generic event not a change event.\n@param {any} value We default to the index of the child.",
    "showLabels": "If `true`, all `BottomNavigationAction`s will show their labels.\nBy default, only the selected `BottomNavigationAction` will show its label.",
    "value": "The value of the currently selected `BottomNavigationAction`."
  },
  "BottomNavigationAction": {
    "children": "This prop isn't supported.\nUse the `component` prop if you need to change the children structure.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "icon": "The icon element.",
    "label": "The label element.",
    "showLabel": "If `true`, the `BottomNavigationAction` will show its label.\nBy default, only the selected `BottomNavigationAction`\ninside `BottomNavigation` will show its label.\n\nThe prop defaults to the value (`false`) inherited from the parent BottomNavigation component.",
    "value": "You can provide your own value. Otherwise, we fallback to the child position index."
  },
  "Breadcrumbs": {
    "children": "The breadcrumb children.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "component": "The component used for the root node.\nEither a string to use a HTML element or a component.",
    "expandText": "Override the default label for the expand button.\n\nFor localization purposes, you can use the provided [translations](/guides/localization/).",
    "itemsAfterCollapse": "If max items is exceeded, the number of items to show after the ellipsis.",
    "itemsBeforeCollapse": "If max items is exceeded, the number of items to show before the ellipsis.",
    "maxItems": "Specifies the maximum number of breadcrumbs to display. When there are more\nthan the maximum number, only the first `itemsBeforeCollapse` and last `itemsAfterCollapse`\nwill be shown, with an ellipsis in between.",
    "separator": "Custom separator node."
  },
  "Button": {
    "children": "The content of the button.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "color": "The color of the component. It supports those theme colors that make sense for this component.",
    "component": "The component used for the root node.\nEither a string to use a HTML element or a component.",
    "disabled": "If `true`, the button is disabled.",
    "disableElevation": "If `true`, no elevation is used.",
    "disableFocusRipple": "If `true`, the  keyboard focus ripple is disabled.",
    "disableRipple": "If `true`, the ripple effect is disabled.\n\n⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure\nto highlight the element by applying separate styles with the `focusVisibleClassName`.",
    "endIcon": "Element placed after the children.",
    "fullWidth": "If `true`, the button will take up the full width of its container.",
    "href": "The URL to link to when the button is clicked.\nIf defined, an `a` element will be used as the root node.",
    "size": "The size of the button.\n`small` is equivalent to the dense button styling.",
    "startIcon": "Element placed before the children.",
    "variant": "The variant to use."
  },
  "ButtonBase": {
    "action": "A ref for imperative actions.\nIt currently only supports `focusVisible()` action.",
    "buttonRef": "@ignore\n\nUse that prop to pass a ref to the native button component.\n@deprecated Use `ref` instead.",
    "centerRipple": "If `true`, the ripples are centered.\nThey won't start at the cursor interaction position.",
    "children": "The content of the component.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "component": "The component used for the root node.\nEither a string to use a HTML element or a component.",
    "disabled": "If `true`, the base button is disabled.",
    "disableRipple": "If `true`, the ripple effect is disabled.\n\n⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure\nto highlight the element by applying separate styles with the `focusVisibleClassName`.",
    "disableTouchRipple": "If `true`, the touch ripple effect is disabled.",
    "focusRipple": "If `true`, the base button will have a keyboard focus ripple.",
    "focusVisibleClassName": "This prop can help a person know which element has the keyboard focus.\nThe class name will be applied when the element gain the focus through a keyboard interaction.\nIt's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).\nThe rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/master/explainer.md).\nA [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components\nif needed.",
    "onFocusVisible": "Callback fired when the component is focused with a keyboard.\nWe trigger a `onFocus` callback too.",
    "tabIndex": "@default 0",
    "TouchRippleProps": "Props applied to the `TouchRipple` element."
  },
  "ButtonGroup": {
    "children": "The content of the button group.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "color": "The color of the component. It supports those theme colors that make sense for this component.",
    "component": "The component used for the root node.\nEither a string to use a HTML element or a component.",
    "disabled": "If `true`, the buttons are disabled.",
    "disableElevation": "If `true`, no elevation is used.",
    "disableFocusRipple": "If `true`, the button keyboard focus ripple is disabled.",
    "disableRipple": "If `true`, the button ripple effect is disabled.",
    "fullWidth": "If `true`, the buttons will take up the full width of its container.",
    "orientation": "The group orientation (layout flow direction).",
    "size": "The size of the button.\n`small` is equivalent to the dense button styling.",
    "variant": "The variant to use."
  },
  "Card": {
    "children": "The content of the component.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "raised": "If `true`, the card will use raised styling."
  },
  "CardActionArea": {
    "children": "The content of the component.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details."
  },
  "CardActions": {
    "children": "The content of the component.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "disableSpacing": "If `true`, the actions do not have additional margin."
  },
  "CardContent": {
    "children": "The content of the component.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "component": "The component used for the root node.\nEither a string to use a HTML element or a component."
  },
  "CardHeader": {
    "action": "The action to display in the card header.",
    "avatar": "The Avatar for the Card Header.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "component": "The component used for the root node.\nEither a string to use a HTML element or a component.",
    "disableTypography": "If `true`, `subheader` and `title` won't be wrapped by a Typography component.\nThis can be useful to render an alternative Typography variant by wrapping\nthe `title` text, and optional `subheader` text\nwith the Typography component.",
    "subheader": "The content of the component.",
    "subheaderTypographyProps": "These props will be forwarded to the subheader\n(as long as disableTypography is not `true`).",
    "title": "The content of the Card Title.",
    "titleTypographyProps": "These props will be forwarded to the title\n(as long as disableTypography is not `true`)."
  },
  "CardMedia": {
    "children": "The content of the component.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "component": "The component used for the root node.\nEither a string to use a HTML element or a component.",
    "image": "Image to be displayed as a background image.\nEither `image` or `src` prop must be specified.\nNote that caller must specify height otherwise the image will not be visible.",
    "src": "An alias for `image` property.\nAvailable only with media components.\nMedia components: `video`, `audio`, `picture`, `iframe`, `img`."
  },
  "Checkbox": {
    "checked": "If `true`, the component is checked.",
    "checkedIcon": "The icon to display when the component is checked.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "color": "The color of the component. It supports those theme colors that make sense for this component.",
    "disabled": "If `true`, the checkbox is disabled.",
    "disableRipple": "If `true`, the ripple effect is disabled.",
    "icon": "The icon to display when the component is unchecked.",
    "id": "The id of the `input` element.",
    "indeterminate": "If `true`, the component appears indeterminate.\nThis does not set the native input element to indeterminate due\nto inconsistent behavior across browsers.\nHowever, we set a `data-indeterminate` attribute on the `input`.",
    "indeterminateIcon": "The icon to display when the component is indeterminate.",
    "inputProps": "[Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.",
    "inputRef": "Pass a ref to the `input` element.",
    "onChange": "Callback fired when the state is changed.\n\n@param {object} event The event source of the callback.\nYou can pull out the new checked state by accessing `event.target.checked` (boolean).",
    "required": "If `true`, the `input` element is required.",
    "size": "The size of the checkbox.\n`small` is equivalent to the dense checkbox styling.",
    "value": "The value of the component. The DOM API casts this to a string.\nThe browser uses \"on\" as the default value."
  },
  "Chip": {
    "avatar": "Avatar element.",
    "children": "This prop isn't supported.\nUse the `component` prop if you need to change the children structure.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "clickable": "If `true`, the chip will appear clickable, and will raise when pressed,\neven if the onClick prop is not defined.\nIf false, the chip will not be clickable, even if onClick prop is defined.\nThis can be used, for example,\nalong with the component prop to indicate an anchor Chip is clickable.",
    "color": "The color of the component. It supports those theme colors that make sense for this component.",
    "component": "The component used for the root node.\nEither a string to use a HTML element or a component.",
    "deleteIcon": "Override the default delete icon element. Shown only if `onDelete` is set.",
    "disabled": "If `true`, the chip should be displayed in a disabled state.",
    "icon": "Icon element.",
    "label": "The content of the label.",
    "onDelete": "Callback fired when the delete icon is clicked.\nIf set, the delete icon will be shown.",
    "size": "The size of the chip.",
    "variant": "The variant to use."
  },
  "CircularProgress": {
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "color": "The color of the component. It supports those theme colors that make sense for this component.",
    "disableShrink": "If `true`, the shrink animation is disabled.\nThis only works if variant is `indeterminate`.",
    "size": "The size of the circle.\nIf using a number, the pixel unit is assumed.\nIf using a string, you need to provide the CSS unit, e.g '3rem'.",
    "thickness": "The thickness of the circle.",
    "value": "The value of the progress indicator for the determinate variant.\nValue between 0 and 100.",
    "variant": "The variant to use.\nUse indeterminate when there is no progress value."
  },
  "ClickAwayListener": {
    "children": "The wrapped element.",
    "disableReactTree": "If `true`, the React tree is ignored and only the DOM tree is considered.\nThis prop changes how portaled elements are handled.",
    "mouseEvent": "The mouse event to listen to. You can disable the listener by providing `false`.",
    "onClickAway": "Callback fired when a \"click away\" event is detected.",
    "touchEvent": "The touch event to listen to. You can disable the listener by providing `false`."
  },
  "Collapse": {
    "children": "The content node to be collapsed.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "collapsedSize": "The width (horizontal) or height (vertical) of the container when collapsed.",
    "component": "The component used for the root node.\nEither a string to use a HTML element or a component.",
    "in": "If `true`, the component will transition in.",
    "orientation": "The collapse transition orientation.",
    "timeout": "The duration for the transition, in milliseconds.\nYou may specify a single timeout for all transitions, or individually with an object.\n\nSet to 'auto' to automatically calculate transition time based on height."
  },
  "Container": {
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "component": "The component used for the root node.\nEither a string to use a HTML element or a component.",
    "disableGutters": "If `true`, the left and right padding is removed.",
    "fixed": "Set the max-width to match the min-width of the current breakpoint.\nThis is useful if you'd prefer to design for a fixed set of sizes\ninstead of trying to accommodate a fully fluid viewport.\nIt's fluid by default.",
    "maxWidth": "Determine the max-width of the container.\nThe container width grows with the size of the screen.\nSet to `false` to disable `maxWidth`."
  },
  "CssBaseline": { "children": "You can wrap a node." },
  "Dialog": {
    "aria-describedby": "The id(s) of the element(s) that describe the dialog.",
    "aria-labelledby": "The id(s) of the element(s) that label the dialog.",
    "children": "Dialog children, usually the included sub-components.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "disableBackdropClick": "If `true`, clicking the backdrop will not fire the `onClose` callback.",
    "disableEscapeKeyDown": "If `true`, hitting escape will not fire the `onClose` callback.",
    "fullScreen": "If `true`, the dialog is full-screen.",
    "fullWidth": "If `true`, the dialog stretches to `maxWidth`.\n\nNotice that the dialog width grow is limited by the default margin.",
    "maxWidth": "Determine the max-width of the dialog.\nThe dialog width grows with the size of the screen.\nSet to `false` to disable `maxWidth`.",
    "onBackdropClick": "Callback fired when the backdrop is clicked.",
    "onClose": "Callback fired when the component requests to be closed.\n\n@param {object} event The event source of the callback.\n@param {string} reason Can be: `\"escapeKeyDown\"`, `\"backdropClick\"`.",
    "onEscapeKeyDown": "Callback fired when the escape key is pressed,\n`disableKeyboard` is false and the modal is in focus.",
    "open": "If `true`, the Dialog is open.",
    "PaperComponent": "The component used to render the body of the dialog.",
    "PaperProps": "Props applied to the [`Paper`](/api/paper/) element.",
    "scroll": "Determine the container for scrolling the dialog.",
    "TransitionComponent": "The component used for the transition.\n[Follow this guide](/components/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.",
    "transitionDuration": "The duration for the transition, in milliseconds.\nYou may specify a single timeout for all transitions, or individually with an object.",
    "TransitionProps": "Props applied to the transition element.\nBy default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition) component."
  },
  "DialogActions": {
    "children": "The content of the component.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "disableSpacing": "If `true`, the actions do not have additional margin."
  },
  "DialogContent": {
    "children": "The content of the component.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "dividers": "Display the top and bottom dividers."
  },
  "DialogContentText": {
    "children": "The content of the component.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details."
  },
  "DialogTitle": {
    "children": "The content of the component.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "disableTypography": "If `true`, the children won't be wrapped by a typography component.\nFor instance, this can be useful to render an h4 instead of the default h2."
  },
  "Divider": {
    "absolute": "Absolutely position the element.",
    "children": "The content of the component.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "component": "The component used for the root node.\nEither a string to use a HTML element or a component.",
    "flexItem": "If `true`, a vertical divider will have the correct height when used in flex container.\n(By default, a vertical divider will have a calculated height of `0px` if it is the child of a flex container.)",
    "light": "If `true`, the divider will have a lighter color.",
    "orientation": "The divider orientation.",
    "textAlign": "The text alignment.",
    "variant": "The variant to use."
  },
  "Drawer": {
    "anchor": "Side from which the drawer will appear.",
    "children": "The contents of the drawer.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "elevation": "The elevation of the drawer.",
    "ModalProps": "Props applied to the [`Modal`](/api/modal/) element.",
    "onClose": "Callback fired when the component requests to be closed.\n\n@param {object} event The event source of the callback.",
    "open": "If `true`, the drawer is open.",
    "PaperProps": "Props applied to the [`Paper`](/api/paper/) element.",
    "SlideProps": "Props applied to the [`Slide`](/api/slide/) element.",
    "transitionDuration": "The duration for the transition, in milliseconds.\nYou may specify a single timeout for all transitions, or individually with an object.",
    "variant": "The variant to use."
  },
  "Fab": {
    "children": "The content of the button.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "color": "The color of the component. It supports those theme colors that make sense for this component.",
    "component": "The component used for the root node.\nEither a string to use a HTML element or a component.",
    "disabled": "If `true`, the button is disabled.",
    "disableFocusRipple": "If `true`, the  keyboard focus ripple is disabled.",
    "disableRipple": "If `true`, the ripple effect is disabled.",
    "href": "The URL to link to when the button is clicked.\nIf defined, an `a` element will be used as the root node.",
    "size": "The size of the button.\n`small` is equivalent to the dense button styling.",
    "variant": "The variant to use."
  },
  "Fade": {
    "appear": "Perform the enter transition when it first mounts if `in` is also `true`.\nSet this to `false` to disable this behavior.",
    "children": "A single child content element.",
    "in": "If `true`, the component will transition in.",
    "timeout": "The duration for the transition, in milliseconds.\nYou may specify a single timeout for all transitions, or individually with an object.\n@default {\n  enter: duration.enteringScreen,\n  exit: duration.leavingScreen,\n}"
  },
  "FilledInput": {
    "autoComplete": "This prop helps users to fill forms faster, especially on mobile devices.\nThe name can be confusing, as it's more like an autofill.\nYou can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).",
    "autoFocus": "If `true`, the `input` element is focused during the first mount.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "color": "The color of the component. It supports those theme colors that make sense for this component.\nThe prop defaults to the value (`'primary'`) inherited from the parent FormControl component.",
    "defaultValue": "The default `input` element value. Use when the component is not controlled.",
    "disabled": "If `true`, the `input` element is disabled.\nThe prop defaults to the value (`false`) inherited from the parent FormControl component.",
    "disableUnderline": "If `true`, the input will not have an underline.",
    "endAdornment": "End `InputAdornment` for this component.",
    "error": "If `true`, the `input` will indicate an error.\nThe prop defaults to the value (`false`) inherited from the parent FormControl component.",
    "fullWidth": "If `true`, the `input` will take up the full width of its container.",
    "id": "The id of the `input` element.",
    "inputComponent": "The component used for the `input` element.\nEither a string to use a HTML element or a component.",
    "inputProps": "[Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.",
    "inputRef": "Pass a ref to the `input` element.",
    "margin": "If `dense`, will adjust vertical spacing. This is normally obtained via context from\nFormControl.\nThe prop defaults to the value (`'none'`) inherited from the parent FormControl component.",
    "maxRows": "Maximum number of rows to display when multiline option is set to true.",
    "minRows": "Minimum number of rows to display when multiline option is set to true.",
    "multiline": "If `true`, a `textarea` element is rendered.",
    "name": "Name attribute of the `input` element.",
    "onChange": "Callback fired when the value is changed.\n\n@param {object} event The event source of the callback.\nYou can pull out the new value by accessing `event.target.value` (string).",
    "placeholder": "The short hint displayed in the `input` before the user enters a value.",
    "readOnly": "It prevents the user from changing the value of the field\n(not from interacting with the field).",
    "required": "If `true`, the `input` element is required.\nThe prop defaults to the value (`false`) inherited from the parent FormControl component.",
    "rows": "Number of rows to display when multiline option is set to true.",
    "startAdornment": "Start `InputAdornment` for this component.",
    "type": "Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).",
    "value": "The value of the `input` element, required for a controlled component."
  },
  "FormControl": {
    "children": "The contents of the form control.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "color": "The color of the component. It supports those theme colors that make sense for this component.",
    "component": "The component used for the root node.\nEither a string to use a HTML element or a component.",
    "disabled": "If `true`, the label, input and helper text should be displayed in a disabled state.",
    "error": "If `true`, the label should be displayed in an error state.",
    "focused": "If `true`, the component is displayed in focused state.",
    "fullWidth": "If `true`, the component will take up the full width of its container.",
    "hiddenLabel": "If `true`, the label is hidden.\nThis is used to increase density for a `FilledInput`.\nBe sure to add `aria-label` to the `input` element.",
    "margin": "If `dense` or `normal`, will adjust vertical spacing of this and contained components.",
    "required": "If `true`, the label will indicate that the `input` is required.",
    "size": "The size of the text field.",
    "variant": "The variant to use."
  },
  "FormControlLabel": {
    "checked": "If `true`, the component appears selected.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "control": "A control element. For instance, it can be a `Radio`, a `Switch` or a `Checkbox`.",
    "disabled": "If `true`, the control is disabled.",
    "inputRef": "Pass a ref to the `input` element.",
    "label": "The text to be used in an enclosing label element.",
    "labelPlacement": "The position of the label.",
    "onChange": "Callback fired when the state is changed.\n\n@param {object} event The event source of the callback.\nYou can pull out the new checked state by accessing `event.target.checked` (boolean).",
    "value": "The value of the component."
  },
  "FormGroup": {
    "children": "The content of the component.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "row": "Display group of elements in a compact row."
  },
  "FormHelperText": {
    "children": "The content of the component.\n\nIf `' '` is provided, the component reserves one line height for displaying a future message.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "component": "The component used for the root node.\nEither a string to use a HTML element or a component.",
    "disabled": "If `true`, the helper text should be displayed in a disabled state.",
    "error": "If `true`, helper text should be displayed in an error state.",
    "filled": "If `true`, the helper text should use filled classes key.",
    "focused": "If `true`, the helper text should use focused classes key.",
    "margin": "If `dense`, will adjust vertical spacing. This is normally obtained via context from\nFormControl.",
    "required": "If `true`, the helper text should use required classes key.",
    "variant": "The variant to use."
  },
  "FormLabel": {
    "children": "The content of the component.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "color": "The color of the component. It supports those theme colors that make sense for this component.",
    "component": "The component used for the root node.\nEither a string to use a HTML element or a component.",
    "disabled": "If `true`, the label should be displayed in a disabled state.",
    "error": "If `true`, the label should be displayed in an error state.",
    "filled": "If `true`, the label should use filled classes key.",
    "focused": "If `true`, the input of this label is focused (used by `FormGroup` components).",
    "required": "If `true`, the label will indicate that the `input` is required."
  },
  "Grid": {
    "alignContent": "Defines the `align-content` style property.\nIt's applied for all screen sizes.",
    "alignItems": "Defines the `align-items` style property.\nIt's applied for all screen sizes.",
    "children": "The content of the component.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "component": "The component used for the root node.\nEither a string to use a HTML element or a component.",
    "container": "If `true`, the component will have the flex *container* behavior.\nYou should be wrapping *items* with a *container*.",
    "direction": "Defines the `flex-direction` style property.\nIt is applied for all screen sizes.",
    "item": "If `true`, the component will have the flex *item* behavior.\nYou should be wrapping *items* with a *container*.",
    "justifyContent": "Defines the `justify-content` style property.\nIt is applied for all screen sizes.",
    "lg": "Defines the number of grids the component is going to use.\nIt's applied for the `lg` breakpoint and wider screens if not overridden.",
    "md": "Defines the number of grids the component is going to use.\nIt's applied for the `md` breakpoint and wider screens if not overridden.",
    "sm": "Defines the number of grids the component is going to use.\nIt's applied for the `sm` breakpoint and wider screens if not overridden.",
    "spacing": "Defines the space between the type `item` component.\nIt can only be used on a type `container` component.",
    "wrap": "Defines the `flex-wrap` style property.\nIt's applied for all screen sizes.",
    "xl": "Defines the number of grids the component is going to use.\nIt's applied for the `xl` breakpoint and wider screens.",
    "xs": "Defines the number of grids the component is going to use.\nIt's applied for all the screen sizes with the lowest priority.",
    "zeroMinWidth": "If `true`, it sets `min-width: 0` on the item.\nRefer to the limitations section of the documentation to better understand the use case."
  },
  "Grow": {
    "appear": "Perform the enter transition when it first mounts if `in` is also `true`.\nSet this to `false` to disable this behavior.",
    "children": "A single child content element.",
    "in": "If `true`, show the component; triggers the enter or exit animation.",
    "timeout": "The duration for the transition, in milliseconds.\nYou may specify a single timeout for all transitions, or individually with an object.\n\nSet to 'auto' to automatically calculate transition time based on height."
  },
  "Hidden": {
    "children": "The content of the component.",
    "implementation": "Specify which implementation to use.  'js' is the default, 'css' works better for\nserver-side rendering.",
    "initialWidth": "You can use this prop when choosing the `js` implementation with server-side rendering.\n\nAs `window.innerWidth` is unavailable on the server,\nwe default to rendering an empty component during the first mount.\nYou might want to use a heuristic to approximate\nthe screen width of the client browser screen width.\n\nFor instance, you could be using the user-agent or the client-hints.\nhttps://caniuse.com/#search=client%20hint",
    "lgDown": "If `true`, screens this size and down are hidden.",
    "lgUp": "If `true`, screens this size and up are hidden.",
    "mdDown": "If `true`, screens this size and down are hidden.",
    "mdUp": "If `true`, screens this size and up are hidden.",
    "only": "Hide the given breakpoint(s).",
    "smDown": "If `true`, screens this size and down are hidden.",
    "smUp": "If `true`, screens this size and up are hidden.",
    "xlDown": "If `true`, screens this size and down are hidden.",
    "xlUp": "If `true`, screens this size and up are hidden.",
    "xsDown": "If `true`, screens this size and down are hidden.",
    "xsUp": "If `true`, screens this size and up are hidden."
  },
  "Icon": {
    "children": "The name of the icon font ligature.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "color": "The color of the component. It supports those theme colors that make sense for this component.",
    "component": "The component used for the root node.\nEither a string to use a HTML element or a component.",
    "fontSize": "The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size."
  },
  "IconButton": {
    "children": "The icon element.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "color": "The color of the component. It supports those theme colors that make sense for this component.",
    "disabled": "If `true`, the button is disabled.",
    "disableFocusRipple": "If `true`, the  keyboard focus ripple is disabled.",
    "disableRipple": "If `true`, the ripple effect is disabled.\n\n⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure\nto highlight the element by applying separate styles with the `focusVisibleClassName`.",
    "edge": "If given, uses a negative margin to counteract the padding on one\nside (this is often helpful for aligning the left or right\nside of the icon with content above or below, without ruining the border\nsize and shape).",
    "size": "The size of the button.\n`small` is equivalent to the dense button styling."
  },
  "ImageList": {
    "children": "Items that will be in the image list.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "cols": "Number of columns.",
    "component": "The component used for the root node.\nEither a string to use a HTML element or a component.",
    "gap": "The gap between items in px.",
    "rowHeight": "The height of one row in px.",
    "variant": "The variant to use."
  },
  "ImageListItem": {
    "children": "While you can pass any node as children, the main use case is for an img.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "cols": "Width of the item in number of grid columns.",
    "component": "The component used for the root node.\nEither a string to use a HTML element or a component.",
    "rows": "Height of the item in number of grid rows."
  },
  "ImageListItemBar": {
    "actionIcon": "An IconButton element to be used as secondary action target\n(primary action target is the item itself).",
    "actionPosition": "Position of secondary action IconButton.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "position": "Position of the title bar.",
    "subtitle": "String or element serving as subtitle (support text).",
    "title": "Title to be displayed."
  },
  "Input": {
    "autoComplete": "This prop helps users to fill forms faster, especially on mobile devices.\nThe name can be confusing, as it's more like an autofill.\nYou can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).",
    "autoFocus": "If `true`, the `input` element is focused during the first mount.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "color": "The color of the component. It supports those theme colors that make sense for this component.\nThe prop defaults to the value (`'primary'`) inherited from the parent FormControl component.",
    "defaultValue": "The default `input` element value. Use when the component is not controlled.",
    "disabled": "If `true`, the `input` element is disabled.\nThe prop defaults to the value (`false`) inherited from the parent FormControl component.",
    "disableUnderline": "If `true`, the `input` will not have an underline.",
    "endAdornment": "End `InputAdornment` for this component.",
    "error": "If `true`, the `input` will indicate an error.\nThe prop defaults to the value (`false`) inherited from the parent FormControl component.",
    "fullWidth": "If `true`, the `input` will take up the full width of its container.",
    "id": "The id of the `input` element.",
    "inputComponent": "The component used for the `input` element.\nEither a string to use a HTML element or a component.",
    "inputProps": "[Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.",
    "inputRef": "Pass a ref to the `input` element.",
    "margin": "If `dense`, will adjust vertical spacing. This is normally obtained via context from\nFormControl.\nThe prop defaults to the value (`'none'`) inherited from the parent FormControl component.",
    "maxRows": "Maximum number of rows to display when multiline option is set to true.",
    "minRows": "Minimum number of rows to display when multiline option is set to true.",
    "multiline": "If `true`, a `textarea` element is rendered.",
    "name": "Name attribute of the `input` element.",
    "onChange": "Callback fired when the value is changed.\n\n@param {object} event The event source of the callback.\nYou can pull out the new value by accessing `event.target.value` (string).",
    "placeholder": "The short hint displayed in the `input` before the user enters a value.",
    "readOnly": "It prevents the user from changing the value of the field\n(not from interacting with the field).",
    "required": "If `true`, the `input` element is required.\nThe prop defaults to the value (`false`) inherited from the parent FormControl component.",
    "rows": "Number of rows to display when multiline option is set to true.",
    "startAdornment": "Start `InputAdornment` for this component.",
    "type": "Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).",
    "value": "The value of the `input` element, required for a controlled component."
  },
  "InputAdornment": {
    "children": "The content of the component, normally an `IconButton` or string.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "component": "The component used for the root node.\nEither a string to use a HTML element or a component.",
    "disablePointerEvents": "Disable pointer events on the root.\nThis allows for the content of the adornment to focus the `input` on click.",
    "disableTypography": "If children is a string then disable wrapping in a Typography component.",
    "position": "The position this adornment should appear relative to the `Input`.",
    "variant": "The variant to use.\nNote: If you are using the `TextField` component or the `FormControl` component\nyou do not have to set this manually."
  },
  "InputBase": {
    "autoComplete": "This prop helps users to fill forms faster, especially on mobile devices.\nThe name can be confusing, as it's more like an autofill.\nYou can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).",
    "autoFocus": "If `true`, the `input` element is focused during the first mount.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "color": "The color of the component. It supports those theme colors that make sense for this component.\nThe prop defaults to the value (`'primary'`) inherited from the parent FormControl component.",
    "defaultValue": "The default `input` element value. Use when the component is not controlled.",
    "disabled": "If `true`, the `input` element is disabled.\nThe prop defaults to the value (`false`) inherited from the parent FormControl component.",
    "endAdornment": "End `InputAdornment` for this component.",
    "error": "If `true`, the `input` will indicate an error.\nThe prop defaults to the value (`false`) inherited from the parent FormControl component.",
    "fullWidth": "If `true`, the `input` will take up the full width of its container.",
    "id": "The id of the `input` element.",
    "inputComponent": "The component used for the `input` element.\nEither a string to use a HTML element or a component.",
    "inputProps": "[Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.",
    "inputRef": "Pass a ref to the `input` element.",
    "margin": "If `dense`, will adjust vertical spacing. This is normally obtained via context from\nFormControl.\nThe prop defaults to the value (`'none'`) inherited from the parent FormControl component.",
    "maxRows": "Maximum number of rows to display when multiline option is set to true.",
    "minRows": "Minimum number of rows to display when multiline option is set to true.",
    "multiline": "If `true`, a `textarea` element is rendered.",
    "name": "Name attribute of the `input` element.",
    "onBlur": "Callback fired when the `input` is blurred.\n\nNotice that the first argument (event) might be undefined.",
    "onChange": "Callback fired when the value is changed.\n\n@param {object} event The event source of the callback.\nYou can pull out the new value by accessing `event.target.value` (string).",
    "placeholder": "The short hint displayed in the `input` before the user enters a value.",
    "readOnly": "It prevents the user from changing the value of the field\n(not from interacting with the field).",
    "required": "If `true`, the `input` element is required.\nThe prop defaults to the value (`false`) inherited from the parent FormControl component.",
    "rows": "Number of rows to display when multiline option is set to true.",
    "startAdornment": "Start `InputAdornment` for this component.",
    "type": "Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).",
    "value": "The value of the `input` element, required for a controlled component."
  },
  "InputLabel": {
    "children": "The contents of the `InputLabel`.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "color": "The color of the component. It supports those theme colors that make sense for this component.",
    "disableAnimation": "If `true`, the transition animation is disabled.",
    "disabled": "If `true`, apply disabled class.",
    "error": "If `true`, the label is displayed in an error state.",
    "focused": "If `true`, the `input` of this label is focused.",
    "margin": "If `dense`, will adjust vertical spacing. This is normally obtained via context from\nFormControl.",
    "required": "if `true`, the label will indicate that the `input` is required.",
    "shrink": "If `true`, the label is shrunk.",
    "variant": "The variant to use."
  },
  "LinearProgress": {
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "color": "The color of the component. It supports those theme colors that make sense for this component.",
    "value": "The value of the progress indicator for the determinate and buffer variants.\nValue between 0 and 100.",
    "valueBuffer": "The value for the buffer variant.\nValue between 0 and 100.",
    "variant": "The variant to use.\nUse indeterminate or query when there is no progress value."
  },
  "Link": {
    "children": "The content of the link.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "color": "The color of the link.",
    "component": "The component used for the root node.\nEither a string to use a HTML element or a component.",
    "TypographyClasses": "`classes` prop applied to the [`Typography`](/api/typography/) element.",
    "underline": "Controls when the link should have an underline.",
    "variant": "Applies the theme typography styles."
  },
  "List": {
    "children": "The content of the component.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "component": "The component used for the root node.\nEither a string to use a HTML element or a component.",
    "dense": "If `true`, compact vertical padding designed for keyboard and mouse input is used for\nthe list and list items.\nThe prop is available to descendant components as the `dense` context.",
    "disablePadding": "If `true`, vertical padding is removed from the list.",
    "subheader": "The content of the subheader, normally `ListSubheader`."
  },
  "ListItem": {
    "alignItems": "Defines the `align-items` style property.",
    "autoFocus": "If `true`, the list item is focused during the first mount.\nFocus will also be triggered if the value changes from false to true.",
    "button": "If `true`, the list item is a button (using `ButtonBase`). Props intended\nfor `ButtonBase` can then be applied to `ListItem`.",
    "children": "The content of the component. If a `ListItemSecondaryAction` is used it must\nbe the last child.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "component": "The component used for the root node.\nEither a string to use a HTML element or a component.",
    "ContainerComponent": "The container component used when a `ListItemSecondaryAction` is the last child.",
    "ContainerProps": "Props applied to the container component if used.",
    "dense": "If `true`, compact vertical padding designed for keyboard and mouse input is used.\nThe prop defaults to the value inherited from the parent List component.",
    "disabled": "If `true`, the list item is disabled.",
    "disableGutters": "If `true`, the left and right padding is removed.",
    "divider": "If `true`, a 1px light border is added to the bottom of the list item.",
    "selected": "Use to apply selected styling."
  },
  "ListItemAvatar": {
    "children": "The content of the component – normally `Avatar`.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details."
  },
  "ListItemIcon": {
    "children": "The content of the component, normally `Icon`, `SvgIcon`,\nor a `@material-ui/icons` SVG icon element.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details."
  },
  "ListItemSecondaryAction": {
    "children": "The content of the component, normally an `IconButton` or selection control.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details."
  },
  "ListItemText": {
    "children": "Alias for the `primary` prop.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "disableTypography": "If `true`, the children won't be wrapped by a Typography component.\nThis can be useful to render an alternative Typography variant by wrapping\nthe `children` (or `primary`) text, and optional `secondary` text\nwith the Typography component.",
    "inset": "If `true`, the children are indented.\nThis should be used if there is no left avatar or left icon.",
    "primary": "The main content element.",
    "primaryTypographyProps": "These props will be forwarded to the primary typography component\n(as long as disableTypography is not `true`).",
    "secondary": "The secondary content element.",
    "secondaryTypographyProps": "These props will be forwarded to the secondary typography component\n(as long as disableTypography is not `true`)."
  },
  "ListSubheader": {
    "children": "The content of the component.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "color": "The color of the component. It supports those theme colors that make sense for this component.",
    "component": "The component used for the root node.\nEither a string to use a HTML element or a component.",
    "disableGutters": "If `true`, the List Subheader will not have gutters.",
    "disableSticky": "If `true`, the List Subheader will not stick to the top during scroll.",
    "inset": "If `true`, the List Subheader is indented."
  },
  "LoadingButton": {
    "children": "The content of the button.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "disabled": "If `true`, the button is disabled.",
    "pending": "If `true`, the pending indicator is shown.",
    "pendingIndicator": "Element placed before the children if the button is in pending state.",
    "pendingPosition": "The pending indicator can be positioned on the start, end, or the center of the button."
  },
  "Menu": {
    "anchorEl": "A HTML element, or a function that returns it.\nIt's used to set the position of the menu.",
    "autoFocus": "If `true` (Default) will focus the `[role=\"menu\"]` if no focusable child is found. Disabled\nchildren are not focusable. If you set this prop to `false` focus will be placed\non the parent modal container. This has severe accessibility implications\nand should only be considered if you manage focus otherwise.",
    "children": "Menu contents, normally `MenuItem`s.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "disableAutoFocusItem": "When opening the menu will not focus the active item but the `[role=\"menu\"]`\nunless `autoFocus` is also set to `false`. Not using the default means not\nfollowing WAI-ARIA authoring practices. Please be considerate about possible\naccessibility implications.",
    "MenuListProps": "Props applied to the [`MenuList`](/api/menu-list/) element.",
    "onClose": "Callback fired when the component requests to be closed.\n\n@param {object} event The event source of the callback.\n@param {string} reason Can be: `\"escapeKeyDown\"`, `\"backdropClick\"`, `\"tabKeyDown\"`.",
    "open": "If `true`, the menu is visible.",
    "PopoverClasses": "`classes` prop applied to the [`Popover`](/api/popover/) element.",
    "transitionDuration": "The length of the transition in `ms`, or 'auto'",
    "TransitionProps": "Props applied to the transition element.\nBy default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition) component.",
    "variant": "The variant to use. Use `menu` to prevent selected items from impacting the initial focus\nand the vertical alignment relative to the anchor element."
  },
  "MenuItem": {
    "children": "Menu item contents.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "component": "The component used for the root node.\nEither a string to use a HTML element or a component.",
    "dense": "If `true`, compact vertical padding designed for keyboard and mouse input is used.\nThe prop defaults to the value inherited from the parent List component.",
    "disableGutters": "If `true`, the left and right padding is removed.",
    "ListItemClasses": "`classes` prop applied to the [`ListItem`](/api/list-item/) element."
  },
  "MenuList": {
    "autoFocus": "If `true`, will focus the `[role=\"menu\"]` container and move into tab order.",
    "autoFocusItem": "If `true`, will focus the first menuitem if `variant=\"menu\"` or selected item\nif `variant=\"selectedMenu\"`.",
    "children": "MenuList contents, normally `MenuItem`s.",
    "disabledItemsFocusable": "If `true`, will allow focus on disabled items.",
    "disableListWrap": "If `true`, the menu items will not wrap focus.",
    "variant": "The variant to use. Use `menu` to prevent selected items from impacting the initial focus\nand the vertical alignment relative to the anchor element."
  },
  "MobileStepper": {
    "activeStep": "Set the active step (zero based index).\nDefines which dot is highlighted when the variant is 'dots'.",
    "backButton": "A back button element. For instance, it can be a `Button` or an `IconButton`.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "LinearProgressProps": "Props applied to the `LinearProgress` element.",
    "nextButton": "A next button element. For instance, it can be a `Button` or an `IconButton`.",
    "position": "Set the positioning type.",
    "steps": "The total steps.",
    "variant": "The variant to use."
  },
  "Modal": {
    "BackdropComponent": "A backdrop component. This prop enables custom backdrop rendering.",
    "BackdropProps": "Props applied to the [`Backdrop`](/api/backdrop/) element.",
    "children": "A single child content element.",
    "closeAfterTransition": "When set to true the Modal waits until a nested Transition is completed before closing.",
    "container": "A HTML element or function that returns one.\nThe `container` will have the portal children appended to it.\n\nBy default, it uses the body of the top-level document object,\nso it's simply `document.body` most of the time.",
    "disableAutoFocus": "If `true`, the modal will not automatically shift focus to itself when it opens, and\nreplace it to the last focused element when it closes.\nThis also works correctly with any modal children that have the `disableAutoFocus` prop.\n\nGenerally this should never be set to `true` as it makes the modal less\naccessible to assistive technologies, like screen readers.",
    "disableBackdropClick": "If `true`, clicking the backdrop will not fire `onClose`.",
    "disableEnforceFocus": "If `true`, the modal will not prevent focus from leaving the modal while open.\n\nGenerally this should never be set to `true` as it makes the modal less\naccessible to assistive technologies, like screen readers.",
    "disableEscapeKeyDown": "If `true`, hitting escape will not fire `onClose`.",
    "disablePortal": "The `children` will be inside the DOM hierarchy of the parent component.",
    "disableRestoreFocus": "If `true`, the modal will not restore focus to previously focused element once\nmodal is hidden.",
    "disableScrollLock": "Disable the scroll lock behavior.",
    "hideBackdrop": "If `true`, the backdrop is not rendered.",
    "keepMounted": "Always keep the children in the DOM.\nThis prop can be useful in SEO situation or\nwhen you want to maximize the responsiveness of the Modal.",
    "onBackdropClick": "Callback fired when the backdrop is clicked.",
    "onClose": "Callback fired when the component requests to be closed.\nThe `reason` parameter can optionally be used to control the response to `onClose`.\n\n@param {object} event The event source of the callback.\n@param {string} reason Can be: `\"escapeKeyDown\"`, `\"backdropClick\"`.",
    "onEscapeKeyDown": "Callback fired when the escape key is pressed,\n`disableEscapeKeyDown` is false and the modal is in focus.",
    "open": "If `true`, the modal is open."
  },
  "NativeSelect": {
    "children": "The option elements to populate the select with.\nCan be some `<option>` elements.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "IconComponent": "The icon that displays the arrow.",
    "input": "An `Input` element; does not have to be a material-ui specific `Input`.",
    "inputProps": "Attributes applied to the `select` element.",
    "onChange": "Callback fired when a menu item is selected.\n\n@param {object} event The event source of the callback.\nYou can pull out the new value by accessing `event.target.value` (string).",
    "value": "The `input` value. The DOM API casts this to a string.",
    "variant": "The variant to use."
  },
  "NoSsr": {
    "children": "You can wrap a node.",
    "defer": "If `true`, the component will not only prevent server-side rendering.\nIt will also defer the rendering of the children into a different screen frame.",
    "fallback": "The fallback content to display."
  },
  "OutlinedInput": {
    "autoComplete": "This prop helps users to fill forms faster, especially on mobile devices.\nThe name can be confusing, as it's more like an autofill.\nYou can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).",
    "autoFocus": "If `true`, the `input` element is focused during the first mount.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "color": "The color of the component. It supports those theme colors that make sense for this component.\nThe prop defaults to the value (`'primary'`) inherited from the parent FormControl component.",
    "defaultValue": "The default `input` element value. Use when the component is not controlled.",
    "disabled": "If `true`, the `input` element is disabled.\nThe prop defaults to the value (`false`) inherited from the parent FormControl component.",
    "endAdornment": "End `InputAdornment` for this component.",
    "error": "If `true`, the `input` will indicate an error.\nThe prop defaults to the value (`false`) inherited from the parent FormControl component.",
    "fullWidth": "If `true`, the `input` will take up the full width of its container.",
    "id": "The id of the `input` element.",
    "inputComponent": "The component used for the `input` element.\nEither a string to use a HTML element or a component.",
    "inputProps": "[Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.",
    "inputRef": "Pass a ref to the `input` element.",
    "label": "The label of the `input`. It is only used for layout. The actual labelling\nis handled by `InputLabel`. If specified `labelWidth` is ignored.",
    "labelWidth": "The width of the label. Is ignored if `label` is provided. Prefer `label`\nif the `input` label appears with a strike through.",
    "margin": "If `dense`, will adjust vertical spacing. This is normally obtained via context from\nFormControl.\nThe prop defaults to the value (`'none'`) inherited from the parent FormControl component.",
    "maxRows": "Maximum number of rows to display when multiline option is set to true.",
    "minRows": "Minimum number of rows to display when multiline option is set to true.",
    "multiline": "If `true`, a `textarea` element is rendered.",
    "name": "Name attribute of the `input` element.",
    "notched": "If `true`, the outline is notched to accommodate the label.",
    "onChange": "Callback fired when the value is changed.\n\n@param {object} event The event source of the callback.\nYou can pull out the new value by accessing `event.target.value` (string).",
    "placeholder": "The short hint displayed in the `input` before the user enters a value.",
    "readOnly": "It prevents the user from changing the value of the field\n(not from interacting with the field).",
    "required": "If `true`, the `input` element is required.\nThe prop defaults to the value (`false`) inherited from the parent FormControl component.",
    "rows": "Number of rows to display when multiline option is set to true.",
    "startAdornment": "Start `InputAdornment` for this component.",
    "type": "Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).",
    "value": "The value of the `input` element, required for a controlled component."
  },
  "Pagination": {
    "boundaryCount": "Number of always visible pages at the beginning and end.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "color": "The active color.",
    "count": "The total number of pages.",
    "defaultPage": "The page selected by default when the component is uncontrolled.",
    "disabled": "If `true`, the component is disabled.",
    "getItemAriaLabel": "Accepts a function which returns a string value that provides a user-friendly name for the current page.\n\nFor localization purposes, you can use the provided [translations](/guides/localization/).\n\n@param {string} type The link or button type to format ('page' | 'first' | 'last' | 'next' | 'previous'). Defaults to 'page'.\n@param {number} page The page number to format.\n@param {bool} selected If true, the current page is selected.\n@returns {string}",
    "hideNextButton": "If `true`, hide the next-page button.",
    "hidePrevButton": "If `true`, hide the previous-page button.",
    "onChange": "Callback fired when the page is changed.\n\n@param {object} event The event source of the callback.\n@param {number} page The page selected.",
    "page": "The current page.",
    "renderItem": "Render the item.\n\n@param {PaginationRenderItemParams} params The props to spread on a PaginationItem.\n@returns {ReactNode}",
    "shape": "The shape of the pagination items.",
    "showFirstButton": "If `true`, show the first-page button.",
    "showLastButton": "If `true`, show the last-page button.",
    "siblingCount": "Number of always visible pages before and after the current page.",
    "size": "The size of the pagination component.",
    "variant": "The variant to use."
  },
  "PaginationItem": {
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "color": "The active color.",
    "component": "The component used for the root node.\nEither a string to use a HTML element or a component.",
    "disabled": "If `true`, the item is disabled.",
    "page": "The current page number.",
    "selected": "If `true` the pagination item is selected.",
    "shape": "The shape of the pagination item.",
    "size": "The size of the pagination item.",
    "type": "The type of pagination item.",
    "variant": "The pagination item variant."
  },
  "Paper": {
    "children": "The content of the component.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "component": "The component used for the root node.\nEither a string to use a HTML element or a component.",
    "elevation": "Shadow depth, corresponds to `dp` in the spec.\nIt accepts values between 0 and 24 inclusive.",
    "square": "If `true`, rounded corners are disabled.",
    "variant": "The variant to use."
  },
  "Popover": {
    "action": "A ref for imperative actions.\nIt currently only supports updatePosition() action.",
    "anchorEl": "A HTML element, or a function that returns it.\nIt's used to set the position of the popover.",
    "anchorOrigin": "This is the point on the anchor where the popover's\n`anchorEl` will attach to. This is not used when the\nanchorReference is 'anchorPosition'.\n\nOptions:\nvertical: [top, center, bottom];\nhorizontal: [left, center, right].\n@default {\n  vertical: 'top',\n  horizontal: 'left',\n}",
    "anchorPosition": "This is the position that may be used\nto set the position of the popover.\nThe coordinates are relative to\nthe application's client area.",
    "anchorReference": "This determines which anchor prop to refer to to set\nthe position of the popover.",
    "children": "The content of the component.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "container": "A HTML element, component instance, or function that returns either.\nThe `container` will passed to the Modal component.\n\nBy default, it uses the body of the anchorEl's top-level document object,\nso it's simply `document.body` most of the time.",
    "elevation": "The elevation of the popover.",
    "getContentAnchorEl": "This function is called in order to retrieve the content anchor element.\nIt's the opposite of the `anchorEl` prop.\nThe content anchor element should be an element inside the popover.\nIt's used to correctly scroll and set the position of the popover.\nThe positioning strategy tries to make the content anchor element just above the\nanchor element.",
    "marginThreshold": "Specifies how close to the edge of the window the popover can appear.",
    "onClose": "Callback fired when the component requests to be closed.\nThe `reason` parameter can optionally be used to control the response to `onClose`.",
    "open": "If `true`, the popover is visible.",
    "PaperProps": "Props applied to the [`Paper`](/api/paper/) element.",
    "transformOrigin": "This is the point on the popover which\nwill attach to the anchor's origin.\n\nOptions:\nvertical: [top, center, bottom, x(px)];\nhorizontal: [left, center, right, x(px)].\n@default {\n  vertical: 'top',\n  horizontal: 'left',\n}",
    "TransitionComponent": "The component used for the transition.\n[Follow this guide](/components/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.",
    "transitionDuration": "Set to 'auto' to automatically calculate transition time based on height.",
    "TransitionProps": "Props applied to the transition element.\nBy default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition) component."
  },
  "Popper": {
    "anchorEl": "A HTML element, [virtualElement](https://popper.js.org/docs/v2/virtual-elements/),\nor a function that returns either.\nIt's used to set the position of the popper.\nThe return value will passed as the reference object of the Popper instance.",
    "children": "Popper render function or node.",
    "container": "A HTML element or function that returns one.\nThe `container` will have the portal children appended to it.\n\nBy default, it uses the body of the top-level document object,\nso it's simply `document.body` most of the time.",
    "disablePortal": "The `children` will be inside the DOM hierarchy of the parent component.",
    "keepMounted": "Always keep the children in the DOM.\nThis prop can be useful in SEO situation or\nwhen you want to maximize the responsiveness of the Popper.",
    "modifiers": "Popper.js is based on a \"plugin-like\" architecture,\nmost of its features are fully encapsulated \"modifiers\".\n\nA modifier is a function that is called each time Popper.js needs to\ncompute the position of the popper.\nFor this reason, modifiers should be very performant to avoid bottlenecks.\nTo learn how to create a modifier, [read the modifiers documentation](https://popper.js.org/docs/v2/modifiers/).",
    "open": "If `true`, the popper is visible.",
    "placement": "Popper placement.",
    "popperOptions": "Options provided to the [`Popper.js`](https://popper.js.org/docs/v2/constructors/#options) instance.",
    "popperRef": "A ref that points to the used popper instance.",
    "transition": "Help supporting a react-transition-group/Transition component."
  },
  "Portal": {
    "children": "The children to render into the `container`.",
    "container": "A HTML element or function that returns one.\nThe `container` will have the portal children appended to it.\n\nBy default, it uses the body of the top-level document object,\nso it's simply `document.body` most of the time.",
    "disablePortal": "The `children` will be inside the DOM hierarchy of the parent component."
  },
  "Radio": {
    "checked": "If `true`, the component is checked.",
    "checkedIcon": "The icon to display when the component is checked.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "color": "The color of the component. It supports those theme colors that make sense for this component.",
    "disabled": "If `true`, the radio is disabled.",
    "disableRipple": "If `true`, the ripple effect is disabled.",
    "icon": "The icon to display when the component is unchecked.",
    "id": "The id of the `input` element.",
    "inputProps": "[Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.",
    "inputRef": "Pass a ref to the `input` element.",
    "name": "Name attribute of the `input` element.",
    "onChange": "Callback fired when the state is changed.\n\n@param {object} event The event source of the callback.\nYou can pull out the new value by accessing `event.target.value` (string).\nYou can pull out the new checked state by accessing `event.target.checked` (boolean).",
    "required": "If `true`, the `input` element is required.",
    "size": "The size of the radio.\n`small` is equivalent to the dense radio styling.",
    "value": "The value of the component. The DOM API casts this to a string."
  },
  "RadioGroup": {
    "children": "The content of the component.",
    "defaultValue": "The default `input` element value. Use when the component is not controlled.",
    "name": "The name used to reference the value of the control.\nIf you don't provide this prop, it falls back to a randomly generated name.",
    "onChange": "Callback fired when a radio button is selected.\n\n@param {object} event The event source of the callback.\nYou can pull out the new value by accessing `event.target.value` (string).",
    "value": "Value of the selected radio button. The DOM API casts this to a string."
  },
  "Rating": {
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "defaultValue": "The default value. Use when the component is not controlled.",
    "disabled": "If `true`, the rating is disabled.",
    "emptyIcon": "The icon to display when empty.",
    "emptyLabelText": "The label read when the rating input is empty.",
    "getLabelText": "Accepts a function which returns a string value that provides a user-friendly name for the current value of the rating.\n\nFor localization purposes, you can use the provided [translations](/guides/localization/).\n@param {number} value The rating label's value to format.\n@returns {string}\n@default function defaultLabelText(value) {\n  return `${value} Star${value !== 1 ? 's' : ''}`;\n}",
    "icon": "The icon to display.",
    "IconContainerComponent": "The component containing the icon.\n@default function IconContainer(props) {\n  const { value, ...other } = props;\n  return <span {...other} />;\n}",
    "max": "Maximum rating.",
    "name": "The name attribute of the radio `input` elements.\nThis input `name` should be unique within the page.\nBeing unique within a form is insufficient since the `name` is used to generated IDs.",
    "onChange": "Callback fired when the value changes.\n@param {object} event The event source of the callback.\n@param {number} value The new value.",
    "onChangeActive": "Callback function that is fired when the hover state changes.\n@param {object} event The event source of the callback.\n@param {number} value The new value.",
    "precision": "The minimum increment value change allowed.",
    "readOnly": "Removes all hover effects and pointer events.",
    "size": "The size of the rating.",
    "value": "The rating value."
  },
  "ScopedCssBaseline": {
    "children": "The content of the component.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details."
  },
  "Select": {
    "autoWidth": "If `true`, the width of the popover will automatically be set according to the items inside the\nmenu, otherwise it will be at least the width of the select input.",
    "children": "The option elements to populate the select with.\nCan be some `MenuItem` when `native` is false and `option` when `native` is true.\n\n⚠️The `MenuItem` elements **must** be direct descendants when `native` is false.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "defaultValue": "The default element value. Use when the component is not controlled.",
    "displayEmpty": "If `true`, a value is displayed even if no items are selected.\n\nIn order to display a meaningful value, a function can be passed to the `renderValue` prop which\nreturns the value to be displayed when no items are selected.\n\n⚠️ When using this prop, make sure the label doesn't overlap with the empty displayed value.\nThe label should either be hidden or forced to a shrunk state.",
    "IconComponent": "The icon that displays the arrow.",
    "id": "The `id` of the wrapper element or the `select` element when `native`.",
    "input": "An `Input` element; does not have to be a material-ui specific `Input`.",
    "inputProps": "[Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\nWhen `native` is `true`, the attributes are applied on the `select` element.",
    "label": "See [OutlinedInput#label](/api/outlined-input/#props)",
    "labelId": "The ID of an element that acts as an additional label. The Select will\nbe labelled by the additional label and the selected value.",
    "labelWidth": "See [OutlinedInput#label](/api/outlined-input/#props)",
    "MenuProps": "Props applied to the [`Menu`](/api/menu/) element.",
    "multiple": "If `true`, `value` must be an array and the menu will support multiple selections.",
    "native": "If `true`, the component uses a native `select` element.",
    "onChange": "Callback fired when a menu item is selected.\n\n@param {object} event The event source of the callback.\nYou can pull out the new value by accessing `event.target.value` (any).\n@param {object} [child] The react element that was selected when `native` is `false` (default).",
    "onClose": "Callback fired when the component requests to be closed.\nUse in controlled mode (see open).\n\n@param {object} event The event source of the callback.",
    "onOpen": "Callback fired when the component requests to be opened.\nUse in controlled mode (see open).\n\n@param {object} event The event source of the callback.",
    "open": "Control `select` open state.\nYou can only use it when the `native` prop is `false` (default).",
    "renderValue": "Render the selected value.\nYou can only use it when the `native` prop is `false` (default).\n\n@param {any} value The `value` provided to the component.\n@returns {ReactNode}",
    "SelectDisplayProps": "Props applied to the clickable div element.",
    "value": "The `input` value. Providing an empty string will select no options.\nThis prop is required when the `native` prop is `false` (default).\nSet to an empty string `''` if you don't want any of the available options to be selected.\n\nIf the value is an object it must have reference equality with the option in order to be selected.\nIf the value is not an object, the string representation must match with the string representation of the option in order to be selected.",
    "variant": "The variant to use."
  },
  "Skeleton": {
    "animation": "The animation.\nIf `false` the animation effect is disabled.",
    "children": "Optional children to infer width and height from.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "component": "The component used for the root node.\nEither a string to use a HTML element or a component.",
    "height": "Height of the skeleton.\nUseful when you don't want to adapt the skeleton to a text element but for instance a card.",
    "variant": "The type of content that will be rendered.",
    "width": "Width of the skeleton.\nUseful when the skeleton is inside an inline element with no width of its own."
  },
  "Slide": {
    "appear": "Perform the enter transition when it first mounts if `in` is also `true`.\nSet this to `false` to disable this behavior.",
    "children": "A single child content element.",
    "direction": "Direction the child node will enter from.",
    "in": "If `true`, show the component; triggers the enter or exit animation.",
    "timeout": "The duration for the transition, in milliseconds.\nYou may specify a single timeout for all transitions, or individually with an object.\n@default {\n  enter: duration.enteringScreen,\n  exit: duration.leavingScreen,\n}"
  },
  "Slider": {
    "aria-label": "The label of the slider.",
    "aria-labelledby": "The id of the element containing a label for the slider.",
    "aria-valuetext": "A string value that provides a user-friendly name for the current value of the slider.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "color": "The color of the component. It supports those theme colors that make sense for this component.",
    "component": "The component used for the root node.\nEither a string to use a HTML element or a component.",
    "defaultValue": "The default element value. Use when the component is not controlled.",
    "disabled": "If `true`, the slider is disabled.",
    "getAriaLabel": "Accepts a function which returns a string value that provides a user-friendly name for the thumb labels of the slider.\n\n@param {number} index The thumb label's index to format.\n@returns {string}",
    "getAriaValueText": "Accepts a function which returns a string value that provides a user-friendly name for the current value of the slider.\n\n@param {number} value The thumb label's value to format.\n@param {number} index The thumb label's index to format.\n@returns {string}",
    "marks": "Marks indicate predetermined values to which the user can move the slider.\nIf `true` the marks are spaced according the value of the `step` prop.\nIf an array, it should contain objects with `value` and an optional `label` keys.",
    "max": "The maximum allowed value of the slider.\nShould not be equal to min.",
    "min": "The minimum allowed value of the slider.\nShould not be equal to max.",
    "name": "Name attribute of the hidden `input` element.",
    "onChange": "Callback function that is fired when the slider's value changed.\n\n@param {object} event The event source of the callback. **Warning**: This is a generic event not a change event.\n@param {number | number[]} value The new value.",
    "onChangeCommitted": "Callback function that is fired when the `mouseup` is triggered.\n\n@param {object} event The event source of the callback. **Warning**: This is a generic event not a change event.\n@param {number | number[]} value The new value.",
    "orientation": "The slider orientation.",
    "scale": "A transformation function, to change the scale of the slider.",
    "step": "The granularity with which the slider can step through values. (A \"discrete\" slider.)\nThe `min` prop serves as the origin for the valid values.\nWe recommend (max - min) to be evenly divisible by the step.\n\nWhen step is `null`, the thumb can only be slid onto marks provided with the `marks` prop.",
    "ThumbComponent": "The component used to display the value label.",
    "track": "The track presentation:\n\n- `normal` the track will render a bar representing the slider value.\n- `inverted` the track will render a bar representing the remaining slider value.\n- `false` the track will render without a bar.",
    "value": "The value of the slider.\nFor ranged sliders, provide an array with two values.",
    "ValueLabelComponent": "The value label component.",
    "valueLabelDisplay": "Controls when the value label is displayed:\n\n- `auto` the value label will display when the thumb is hovered or focused.\n- `on` will display persistently.\n- `off` will never display.",
    "valueLabelFormat": "The format function the value label's value.\n\nWhen a function is provided, it should have the following signature:\n\n- {number} value The value label's value to format\n- {number} index The value label's index to format"
  },
  "SliderStyled": {
    "aria-label": "The label of the slider.",
    "aria-labelledby": "The id of the element containing a label for the slider.",
    "aria-valuetext": "A string value that provides a user-friendly name for the current value of the slider.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "color": "The color of the component. It supports those theme colors that make sense for this component.",
    "components": "The components used for each slot inside the Slider.\nEither a string to use a HTML element or a component.",
    "componentsProps": "The props used for each slot inside the Slider.",
    "defaultValue": "The default element value. Use when the component is not controlled.",
    "disabled": "If `true`, the slider is disabled.",
    "getAriaLabel": "Accepts a function which returns a string value that provides a user-friendly name for the thumb labels of the slider.\n\n@param {number} index The thumb label's index to format.\n@returns {string}",
    "getAriaValueText": "Accepts a function which returns a string value that provides a user-friendly name for the current value of the slider.\n\n@param {number} value The thumb label's value to format.\n@param {number} index The thumb label's index to format.\n@returns {string}",
    "isRtl": "Indicates whether the theme context has rtl direction. It is set automatically.",
    "marks": "Marks indicate predetermined values to which the user can move the slider.\nIf `true` the marks are spaced according the value of the `step` prop.\nIf an array, it should contain objects with `value` and an optional `label` keys.",
    "max": "The maximum allowed value of the slider.\nShould not be equal to min.",
    "min": "The minimum allowed value of the slider.\nShould not be equal to max.",
    "name": "Name attribute of the hidden `input` element.",
    "onChange": "Callback function that is fired when the slider's value changed.\n\n@param {object} event The event source of the callback. **Warning**: This is a generic event not a change event.\n@param {number | number[]} value The new value.",
    "onChangeCommitted": "Callback function that is fired when the `mouseup` is triggered.\n\n@param {object} event The event source of the callback. **Warning**: This is a generic event not a change event.\n@param {number | number[]} value The new value.",
    "orientation": "The slider orientation.",
    "scale": "A transformation function, to change the scale of the slider.",
    "step": "The granularity with which the slider can step through values. (A \"discrete\" slider.)\nThe `min` prop serves as the origin for the valid values.\nWe recommend (max - min) to be evenly divisible by the step.\n\nWhen step is `null`, the thumb can only be slid onto marks provided with the `marks` prop.",
    "sx": "The system prop that allows defining system overrides as well as additional CSS styles.",
    "track": "The track presentation:\n\n- `normal` the track will render a bar representing the slider value.\n- `inverted` the track will render a bar representing the remaining slider value.\n- `false` the track will render without a bar.",
    "value": "The value of the slider.\nFor ranged sliders, provide an array with two values.",
    "valueLabelDisplay": "Controls when the value label is displayed:\n\n- `auto` the value label will display when the thumb is hovered or focused.\n- `on` will display persistently.\n- `off` will never display.",
    "valueLabelFormat": "The format function the value label's value.\n\nWhen a function is provided, it should have the following signature:\n\n- {number} value The value label's value to format\n- {number} index The value label's index to format"
  },
  "SliderUnstyled": {
    "aria-label": "The label of the slider.",
    "aria-labelledby": "The id of the element containing a label for the slider.",
    "aria-valuetext": "A string value that provides a user-friendly name for the current value of the slider.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "color": "The color of the component. It supports those theme colors that make sense for this component.",
    "component": "The component used for the root node.\nEither a string to use a HTML element or a component.",
    "components": "The components used for each slot inside the Slider.\nEither a string to use a HTML element or a component.",
    "componentsProps": "The props used for each slot inside the Slider.",
    "defaultValue": "The default element value. Use when the component is not controlled.",
    "disabled": "If `true`, the slider is disabled.",
    "getAriaLabel": "Accepts a function which returns a string value that provides a user-friendly name for the thumb labels of the slider.\n\n@param {number} index The thumb label's index to format.\n@returns {string}",
    "getAriaValueText": "Accepts a function which returns a string value that provides a user-friendly name for the current value of the slider.\n\n@param {number} value The thumb label's value to format.\n@param {number} index The thumb label's index to format.\n@returns {string}",
    "isRtl": "Indicates whether the theme context has rtl direction. It is set automatically.",
    "marks": "Marks indicate predetermined values to which the user can move the slider.\nIf `true` the marks are spaced according the value of the `step` prop.\nIf an array, it should contain objects with `value` and an optional `label` keys.",
    "max": "The maximum allowed value of the slider.\nShould not be equal to min.",
    "min": "The minimum allowed value of the slider.\nShould not be equal to max.",
    "name": "Name attribute of the hidden `input` element.",
    "onChange": "Callback function that is fired when the slider's value changed.\n\n@param {object} event The event source of the callback. **Warning**: This is a generic event not a change event.\n@param {number | number[]} value The new value.",
    "onChangeCommitted": "Callback function that is fired when the `mouseup` is triggered.\n\n@param {object} event The event source of the callback. **Warning**: This is a generic event not a change event.\n@param {number | number[]} value The new value.",
    "orientation": "The slider orientation.",
    "scale": "A transformation function, to change the scale of the slider.",
    "step": "The granularity with which the slider can step through values. (A \"discrete\" slider.)\nThe `min` prop serves as the origin for the valid values.\nWe recommend (max - min) to be evenly divisible by the step.\n\nWhen step is `null`, the thumb can only be slid onto marks provided with the `marks` prop.",
    "track": "The track presentation:\n\n- `normal` the track will render a bar representing the slider value.\n- `inverted` the track will render a bar representing the remaining slider value.\n- `false` the track will render without a bar.",
    "value": "The value of the slider.\nFor ranged sliders, provide an array with two values.",
    "valueLabelDisplay": "Controls when the value label is displayed:\n\n- `auto` the value label will display when the thumb is hovered or focused.\n- `on` will display persistently.\n- `off` will never display.",
    "valueLabelFormat": "The format function the value label's value.\n\nWhen a function is provided, it should have the following signature:\n\n- {number} value The value label's value to format\n- {number} index The value label's index to format"
  },
  "Snackbar": {
    "action": "The action to display. It renders after the message, at the end of the snackbar.",
    "anchorOrigin": "The anchor of the `Snackbar`.\nOn smaller screens, the component grows to occupy all the available width,\nthe horizontal alignment is ignored.",
    "autoHideDuration": "The number of milliseconds to wait before automatically calling the\n`onClose` function. `onClose` should then set the state of the `open`\nprop to hide the Snackbar. This behavior is disabled by default with\nthe `null` value.",
    "children": "Replace the `SnackbarContent` component.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "ClickAwayListenerProps": "Props applied to the `ClickAwayListener` element.",
    "ContentProps": "Props applied to the [`SnackbarContent`](/api/snackbar-content/) element.",
    "disableWindowBlurListener": "If `true`, the `autoHideDuration` timer will expire even if the window is not focused.",
    "key": "When displaying multiple consecutive Snackbars from a parent rendering a single\n<Snackbar/>, add the key prop to ensure independent treatment of each message.\ne.g. <Snackbar key={message} />, otherwise, the message may update-in-place and\nfeatures such as autoHideDuration may be canceled.",
    "message": "The message to display.",
    "onClose": "Callback fired when the component requests to be closed.\nTypically `onClose` is used to set state in the parent component,\nwhich is used to control the `Snackbar` `open` prop.\nThe `reason` parameter can optionally be used to control the response to `onClose`,\nfor example ignoring `clickaway`.\n\n@param {object} event The event source of the callback.\n@param {string} reason Can be: `\"timeout\"` (`autoHideDuration` expired), `\"clickaway\"`.",
    "open": "If `true`, `Snackbar` is open.",
    "resumeHideDuration": "The number of milliseconds to wait before dismissing after user interaction.\nIf `autoHideDuration` prop isn't specified, it does nothing.\nIf `autoHideDuration` prop is specified but `resumeHideDuration` isn't,\nwe default to `autoHideDuration / 2` ms.",
    "TransitionComponent": "The component used for the transition.\n[Follow this guide](/components/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.",
    "transitionDuration": "The duration for the transition, in milliseconds.\nYou may specify a single timeout for all transitions, or individually with an object.\n@default {\n  enter: duration.enteringScreen,\n  exit: duration.leavingScreen,\n}",
    "TransitionProps": "Props applied to the transition element.\nBy default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition) component."
  },
  "SnackbarContent": {
    "action": "The action to display. It renders after the message, at the end of the snackbar.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "message": "The message to display.",
    "role": "The ARIA role attribute of the element."
  },
  "SpeedDial": {
    "ariaLabel": "The aria-label of the button element.\nAlso used to provide the `id` for the `SpeedDial` element and its children.",
    "children": "SpeedDialActions to display when the SpeedDial is `open`.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "direction": "The direction the actions open relative to the floating action button.",
    "FabProps": "Props applied to the [`Fab`](/api/fab/) element.",
    "hidden": "If `true`, the SpeedDial is hidden.",
    "icon": "The icon to display in the SpeedDial Fab. The `SpeedDialIcon` component\nprovides a default Icon with animation.",
    "onClose": "Callback fired when the component requests to be closed.\n\n@param {object} event The event source of the callback.\n@param {string} reason Can be: `\"toggle\"`, `\"blur\"`, `\"mouseLeave\"`, `\"escapeKeyDown\"`.",
    "onOpen": "Callback fired when the component requests to be open.\n\n@param {object} event The event source of the callback.\n@param {string} reason Can be: `\"toggle\"`, `\"focus\"`, `\"mouseEnter\"`.",
    "open": "If `true`, the SpeedDial is open.",
    "openIcon": "The icon to display in the SpeedDial Fab when the SpeedDial is open.",
    "TransitionComponent": "The component used for the transition.\n[Follow this guide](/components/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.",
    "transitionDuration": "The duration for the transition, in milliseconds.\nYou may specify a single timeout for all transitions, or individually with an object.\n@default {\n  enter: duration.enteringScreen,\n  exit: duration.leavingScreen,\n}",
    "TransitionProps": "Props applied to the transition element.\nBy default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition) component."
  },
  "SpeedDialAction": {
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "delay": "Adds a transition delay, to allow a series of SpeedDialActions to be animated.",
    "FabProps": "Props applied to the [`Fab`](/api/fab/) component.",
    "icon": "The Icon to display in the SpeedDial Fab.",
    "id": "This prop is used to help implement the accessibility logic.\nIf you don't provide this prop. It falls back to a randomly generated id.",
    "open": "If `true`, the tooltip is shown.",
    "TooltipClasses": "`classes` prop applied to the [`Tooltip`](/api/tooltip/) element.",
    "tooltipOpen": "Make the tooltip always visible when the SpeedDial is open.",
    "tooltipPlacement": "Placement of the tooltip.",
    "tooltipTitle": "Label to display in the tooltip."
  },
  "SpeedDialIcon": {
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "icon": "The icon to display in the SpeedDial Floating Action Button.",
    "open": "@ignore\nIf `true`, the SpeedDial is open.",
    "openIcon": "The icon to display in the SpeedDial Floating Action Button when the SpeedDial is open."
  },
  "Step": {
    "active": "Sets the step as active. Is passed to child components.",
    "children": "Should be `Step` sub-components such as `StepLabel`, `StepContent`.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "completed": "Mark the step as completed. Is passed to child components.",
    "disabled": "Mark the step as disabled, will also disable the button if\n`StepButton` is a child of `Step`. Is passed to child components.",
    "expanded": "Expand the step.",
    "index": "The position of the step.\nThe prop defaults to the value inherited from the parent Stepper component.",
    "last": "If `true`, the Step is displayed as rendered last.\nThe prop defaults to the value inherited from the parent Stepper component."
  },
  "StepButton": {
    "children": "Can be a `StepLabel` or a node to place inside `StepLabel` as children.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "icon": "The icon displayed by the step label.",
    "optional": "The optional node to display."
  },
  "StepConnector": {
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details."
  },
  "StepContent": {
    "children": "Step content.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "TransitionComponent": "The component used for the transition.\n[Follow this guide](/components/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.",
    "transitionDuration": "Adjust the duration of the content expand transition.\nPassed as a prop to the transition component.\n\nSet to 'auto' to automatically calculate transition time based on height.",
    "TransitionProps": "Props applied to the transition element.\nBy default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition) component."
  },
  "StepIcon": {
    "active": "Whether this step is active.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "completed": "Mark the step as completed. Is passed to child components.",
    "error": "Mark the step as failed.",
    "icon": "The label displayed in the step icon."
  },
  "StepLabel": {
    "children": "In most cases will simply be a string containing a title for the label.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "error": "Mark the step as failed.",
    "icon": "Override the default label of the step icon.",
    "optional": "The optional node to display.",
    "StepIconComponent": "The component to render in place of the [`StepIcon`](/api/step-icon/).",
    "StepIconProps": "Props applied to the [`StepIcon`](/api/step-icon/) element."
  },
  "Stepper": {
    "activeStep": "Set the active step (zero based index).\nSet to -1 to disable all the steps.",
    "alternativeLabel": "If set to 'true' and orientation is horizontal,\nthen the step label will be positioned under the icon.",
    "children": "Two or more `<Step />` components.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "connector": "An element to be placed between each step.",
    "nonLinear": "If set the `Stepper` will not assist in controlling steps for linear flow.",
    "orientation": "The stepper orientation (layout flow direction)."
  },
  "SvgIcon": {
    "children": "Node passed into the SVG element.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "color": "The color of the component. It supports those theme colors that make sense for this component.\nYou can use the `htmlColor` prop to apply a color attribute to the SVG element.",
    "component": "The component used for the root node.\nEither a string to use a HTML element or a component.",
    "fontSize": "The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.",
    "htmlColor": "Applies a color attribute to the SVG element.",
    "shapeRendering": "The shape-rendering attribute. The behavior of the different options is described on the\n[MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering).\nIf you are having issues with blurry icons you should investigate this prop.",
    "titleAccess": "Provides a human-readable title for the element that contains it.\nhttps://www.w3.org/TR/SVG-access/#Equivalent",
    "viewBox": "Allows you to redefine what the coordinates without units mean inside an SVG element.\nFor example, if the SVG element is 500 (width) by 200 (height),\nand you pass viewBox=\"0 0 50 20\",\nthis means that the coordinates inside the SVG will go from the top left corner (0,0)\nto bottom right (50,20) and each unit will be worth 10px."
  },
  "SwipeableDrawer": {
    "children": "The contents of the drawer.",
    "disableBackdropTransition": "Disable the backdrop transition.\nThis can improve the FPS on low-end devices.",
    "disableDiscovery": "If `true`, touching the screen near the edge of the drawer will not slide in the drawer a bit\nto promote accidental discovery of the swipe gesture.",
    "disableSwipeToOpen": "If `true`, swipe to open is disabled. This is useful in browsers where swiping triggers\nnavigation actions. Swipe to open is disabled on iOS browsers by default.",
    "hysteresis": "Affects how far the drawer must be opened/closed to change his state.\nSpecified as percent (0-1) of the width of the drawer",
    "minFlingVelocity": "Defines, from which (average) velocity on, the swipe is\ndefined as complete although hysteresis isn't reached.\nGood threshold is between 250 - 1000 px/s",
    "onClose": "Callback fired when the component requests to be closed.\n\n@param {object} event The event source of the callback.",
    "onOpen": "Callback fired when the component requests to be opened.\n\n@param {object} event The event source of the callback.",
    "open": "If `true`, the drawer is open.",
    "SwipeAreaProps": "The element is used to intercept the touch events on the edge.",
    "swipeAreaWidth": "The width of the left most (or right most) area in `px` that\nthe drawer can be swiped open from.",
    "transitionDuration": "The duration for the transition, in milliseconds.\nYou may specify a single timeout for all transitions, or individually with an object."
  },
  "Switch": {
    "checked": "If `true`, the component is checked.",
    "checkedIcon": "The icon to display when the component is checked.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "color": "The color of the component. It supports those theme colors that make sense for this component.",
    "disabled": "If `true`, the switch is disabled.",
    "disableRipple": "If `true`, the ripple effect is disabled.",
    "edge": "If given, uses a negative margin to counteract the padding on one\nside (this is often helpful for aligning the left or right\nside of the icon with content above or below, without ruining the border\nsize and shape).",
    "icon": "The icon to display when the component is unchecked.",
    "id": "The id of the `input` element.",
    "inputProps": "[Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.",
    "inputRef": "Pass a ref to the `input` element.",
    "onChange": "Callback fired when the state is changed.\n\n@param {object} event The event source of the callback.\nYou can pull out the new value by accessing `event.target.value` (string).\nYou can pull out the new checked state by accessing `event.target.checked` (boolean).",
    "required": "If `true`, the `input` element is required.",
    "size": "The size of the switch.\n`small` is equivalent to the dense switch styling.",
    "value": "The value of the component. The DOM API casts this to a string.\nThe browser uses \"on\" as the default value."
  },
  "Tab": {
    "children": "This prop isn't supported.\nUse the `component` prop if you need to change the children structure.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "disabled": "If `true`, the tab is disabled.",
    "disableFocusRipple": "If `true`, the  keyboard focus ripple is disabled.",
    "disableRipple": "If `true`, the ripple effect is disabled.\n\n⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure\nto highlight the element by applying separate styles with the `focusVisibleClassName`.",
    "icon": "The icon element.",
    "label": "The label element.",
    "value": "You can provide your own value. Otherwise, we fallback to the child position index.",
    "wrapped": "Tab labels appear in a single row.\nThey can use a second line if needed."
  },
  "TabContext": {
    "children": "The content of the component.",
    "value": "The value of the currently selected `Tab`."
  },
  "TabList": { "children": "A list of `<Tab />` elements." },
  "TabPanel": {
    "children": "The content of the component.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "value": "The `value` of the corresponding `Tab`. Must use the index of the `Tab` when\nno `value` was passed to `Tab`."
  },
  "TabScrollButton": {
    "children": "The content of the component.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "direction": "Which direction should the button indicate?",
    "disabled": "If `true`, the element is disabled.",
    "orientation": "The tabs orientation (layout flow direction)."
  },
  "Table": {
    "children": "The content of the table, normally `TableHead` and `TableBody`.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "component": "The component used for the root node.\nEither a string to use a HTML element or a component.",
    "padding": "Allows TableCells to inherit padding of the Table.",
    "size": "Allows TableCells to inherit size of the Table.",
    "stickyHeader": "Set the header sticky.\n\n⚠️ It doesn't work with IE11."
  },
  "TableBody": {
    "children": "The content of the component, normally `TableRow`.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "component": "The component used for the root node.\nEither a string to use a HTML element or a component."
  },
  "TableCell": {
    "align": "Set the text-align on the table cell content.\n\nMonetary or generally number fields **should be right aligned** as that allows\nyou to add them up quickly in your head without having to worry about decimals.",
    "children": "The table cell contents.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "component": "The component used for the root node.\nEither a string to use a HTML element or a component.",
    "padding": "Sets the padding applied to the cell.\nThe prop defaults to the value (`'default'`) inherited from the parent Table component.",
    "scope": "Set scope attribute.",
    "size": "Specify the size of the cell.\nThe prop defaults to the value (`'medium'`) inherited from the parent Table component.",
    "sortDirection": "Set aria-sort direction.",
    "variant": "Specify the cell type.\nThe prop defaults to the value inherited from the parent TableHead, TableBody, or TableFooter components."
  },
  "TableContainer": {
    "children": "The table itself, normally `<Table />`.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "component": "The component used for the root node.\nEither a string to use a HTML element or a component."
  },
  "TableFooter": {
    "children": "The content of the component, normally `TableRow`.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "component": "The component used for the root node.\nEither a string to use a HTML element or a component."
  },
  "TableHead": {
    "children": "The content of the component, normally `TableRow`.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "component": "The component used for the root node.\nEither a string to use a HTML element or a component."
  },
  "TablePagination": {
    "ActionsComponent": "The component used for displaying the actions.\nEither a string to use a HTML element or a component.",
    "backIconButtonProps": "Props applied to the back arrow [`IconButton`](/api/icon-button/) component.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "component": "The component used for the root node.\nEither a string to use a HTML element or a component.",
    "count": "The total number of rows.\n\nTo enable server side pagination for an unknown number of items, provide -1.",
    "getItemAriaLabel": "Accepts a function which returns a string value that provides a user-friendly name for the current page.\n\nFor localization purposes, you can use the provided [translations](/guides/localization/).\n\n@param {string} type The link or button type to format ('first' | 'last' | 'next' | 'previous').\n@returns {string}\n@default function defaultGetAriaLabel(type) {\n  return `Go to ${type} page`;\n}",
    "labelDisplayedRows": "Customize the displayed rows label. Invoked with a `{ from, to, count, page }`\nobject.\n\nFor localization purposes, you can use the provided [translations](/guides/localization/).\n@default function defaultLabelDisplayedRows({ from, to, count }) {\n  return `${from}-${to} of ${count !== -1 ? count : `more than ${to}`}`;\n}",
    "labelRowsPerPage": "Customize the rows per page label.\n\nFor localization purposes, you can use the provided [translations](/guides/localization/).",
    "nextIconButtonProps": "Props applied to the next arrow [`IconButton`](/api/icon-button/) element.",
    "onPageChange": "Callback fired when the page is changed.\n\n@param {object} event The event source of the callback.\n@param {number} page The page selected.",
    "onRowsPerPageChange": "Callback fired when the number of rows per page is changed.\n\n@param {object} event The event source of the callback.",
    "page": "The zero-based index of the current page.",
    "rowsPerPage": "The number of rows per page.\n\nSet -1 to display all the rows.",
    "rowsPerPageOptions": "Customizes the options of the rows per page select field. If less than two options are\navailable, no select field will be displayed.",
    "SelectProps": "Props applied to the rows per page [`Select`](/api/select/) element.",
    "showFirstButton": "If `true`, show the first-page button.",
    "showLastButton": "If `true`, show the last-page button."
  },
  "TableRow": {
    "children": "Should be valid <tr> children such as `TableCell`.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "component": "The component used for the root node.\nEither a string to use a HTML element or a component.",
    "hover": "If `true`, the table row will shade on hover.",
    "selected": "If `true`, the table row will have the selected shading."
  },
  "TableSortLabel": {
    "active": "If `true`, the label will have the active styling (should be true for the sorted column).",
    "children": "Label contents, the arrow will be appended automatically.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "direction": "The current sort direction.",
    "hideSortIcon": "Hide sort icon when active is false.",
    "IconComponent": "Sort icon to use."
  },
  "Tabs": {
    "action": "Callback fired when the component mounts.\nThis is useful when you want to trigger an action programmatically.\nIt supports two actions: `updateIndicator()` and `updateScrollButtons()`\n\n@param {object} actions This object contains all possible actions\nthat can be triggered programmatically.",
    "allowScrollButtonsMobile": "If `true`, the scroll buttons aren't forced hidden on mobile.\nBy default the scroll buttons are hidden on mobile and takes precedence over `scrollButtons`.",
    "aria-label": "The label for the Tabs as a string.",
    "aria-labelledby": "An id or list of ids separated by a space that label the Tabs.",
    "centered": "If `true`, the tabs are centered.\nThis prop is intended for large views.",
    "children": "The content of the component.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "component": "The component used for the root node.\nEither a string to use a HTML element or a component.",
    "indicatorColor": "Determines the color of the indicator.",
    "onChange": "Callback fired when the value changes.\n\n@param {object} event The event source of the callback. **Warning**: This is a generic event not a change event.\n@param {any} value We default to the index of the child (number)",
    "orientation": "The tabs orientation (layout flow direction).",
    "ScrollButtonComponent": "The component used to render the scroll buttons.",
    "scrollButtons": "Determine behavior of scroll buttons when tabs are set to scroll:\n\n- `auto` will only present them when not all the items are visible.\n- `true` will always present them.\n- `false` will never present them.\n\nBy default the scroll buttons are hidden on mobile.\nThis behavior can be disabled with `allowScrollButtonsMobile`.",
    "selectionFollowsFocus": "If `true` the selected tab changes on focus. Otherwise it only\nchanges on activation.",
    "TabIndicatorProps": "Props applied to the tab indicator element.",
    "TabScrollButtonProps": "Props applied to the [`TabScrollButton`](/api/tab-scroll-button/) element.",
    "textColor": "Determines the color of the `Tab`.",
    "value": "The value of the currently selected `Tab`.\nIf you don't want any selected `Tab`, you can set this prop to `false`.",
    "variant": "Determines additional display behavior of the tabs:\n\n - `scrollable` will invoke scrolling properties and allow for horizontally\n scrolling (or swiping) of the tab bar.\n -`fullWidth` will make the tabs grow to use all the available space,\n which should be used for small views, like on mobile.\n - `standard` will render the default state.",
    "visibleScrollbar": "If `true`, the scrollbar is visible. It can be useful when displaying\na long vertical list of tabs."
  },
  "TextField": {
    "autoComplete": "This prop helps users to fill forms faster, especially on mobile devices.\nThe name can be confusing, as it's more like an autofill.\nYou can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).",
    "autoFocus": "If `true`, the `input` element is focused during the first mount.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "color": "The color of the component. It supports those theme colors that make sense for this component.",
    "defaultValue": "The default value of the `input` element.",
    "disabled": "If `true`, the `input` element is disabled.",
    "error": "If `true`, the label is displayed in an error state.",
    "FormHelperTextProps": "Props applied to the [`FormHelperText`](/api/form-helper-text/) element.",
    "fullWidth": "If `true`, the input will take up the full width of its container.",
    "helperText": "The helper text content.",
    "id": "The id of the `input` element.\nUse this prop to make `label` and `helperText` accessible for screen readers.",
    "InputLabelProps": "Props applied to the [`InputLabel`](/api/input-label/) element.",
    "inputProps": "[Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.",
    "InputProps": "Props applied to the Input element.\nIt will be a [`FilledInput`](/api/filled-input/),\n[`OutlinedInput`](/api/outlined-input/) or [`Input`](/api/input/)\ncomponent depending on the `variant` prop value.",
    "inputRef": "Pass a ref to the `input` element.",
    "label": "The label content.",
    "margin": "If `dense` or `normal`, will adjust vertical spacing of this and contained components.",
    "maxRows": "Maximum number of rows to display when multiline option is set to true.",
    "minRows": "Minimum number of rows to display when multiline option is set to true.",
    "multiline": "If `true`, a `textarea` element is rendered.instead of an input.",
    "name": "Name attribute of the `input` element.",
    "onChange": "Callback fired when the value is changed.\n\n@param {object} event The event source of the callback.\nYou can pull out the new value by accessing `event.target.value` (string).",
    "placeholder": "The short hint displayed in the input before the user enters a value.",
    "required": "If `true`, the label is displayed as required and the `input` element is required.",
    "rows": "Number of rows to display when multiline option is set to true.",
    "select": "Render a [`Select`](/api/select/) element while passing the Input element to `Select` as `input` parameter.\nIf this option is set you must pass the options of the select as children.",
    "SelectProps": "Props applied to the [`Select`](/api/select/) element.",
    "size": "The size of the text field.",
    "type": "Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).",
    "value": "The value of the `input` element, required for a controlled component.",
    "variant": "The variant to use."
  },
  "TextareaAutosize": {
    "maxRows": "Maximum number of rows to display.",
    "minRows": "Minimum number of rows to display."
  },
  "Timeline": {
    "align": "The position where the timeline's content should appear.",
    "children": "The content of the component.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details."
  },
  "TimelineConnector": {
    "children": "The content of the component.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details."
  },
  "TimelineContent": {
    "children": "The content of the component.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details."
  },
  "TimelineDot": {
    "children": "The content of the component.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "color": "The dot can have a different colors.",
    "variant": "The dot can appear filled or outlined."
  },
  "TimelineItem": {
    "children": "The content of the component.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details."
  },
  "TimelineOppositeContent": {
    "children": "The content of the component.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details."
  },
  "TimelineSeparator": {
    "children": "The content of the component.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details."
  },
  "ToggleButton": {
    "children": "The content of the button.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "disabled": "If `true`, the button is disabled.",
    "disableFocusRipple": "If `true`, the  keyboard focus ripple is disabled.",
    "disableRipple": "If `true`, the ripple effect is disabled.\n\n⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure\nto highlight the element by applying separate styles with the `focusVisibleClassName`.",
    "selected": "If `true`, the button is rendered in an active state.",
    "size": "The size of the button.\nThe prop defaults to the value inherited from the parent ToggleButtonGroup component.",
    "value": "The value to associate with the button when selected in a\nToggleButtonGroup."
  },
  "ToggleButtonGroup": {
    "children": "The content of the button.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "exclusive": "If `true`, only allow one of the child ToggleButton values to be selected.",
    "onChange": "Callback fired when the value changes.\n\n@param {object} event The event source of the callback.\n@param {any} value of the selected buttons. When `exclusive` is true\nthis is a single value; when false an array of selected values. If no value\nis selected and `exclusive` is true the value is null; when false an empty array.",
    "orientation": "The group orientation (layout flow direction).",
    "size": "The size of the buttons.",
    "value": "The currently selected value within the group or an array of selected\nvalues when `exclusive` is false.\n\nThe value must have reference equality with the option in order to be selected."
  },
  "Toolbar": {
    "children": "Toolbar children, usually a mixture of `IconButton`, `Button` and `Typography`.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "component": "The component used for the root node.\nEither a string to use a HTML element or a component.",
    "disableGutters": "If `true`, disables gutter padding.",
    "variant": "The variant to use."
  },
  "Tooltip": {
    "arrow": "If `true`, adds an arrow to the tooltip.",
    "children": "Tooltip reference element.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "describeChild": "Set to `true` if the `title` acts as an accessible description.\nBy default the `title` acts as an accessible label for the child.",
    "disableFocusListener": "Do not respond to focus events.",
    "disableHoverListener": "Do not respond to hover events.",
    "disableInteractive": "Makes a tooltip not interactive, i.e. it will close when the user\nhovers over the tooltip before the `leaveDelay` is expired.",
    "disableTouchListener": "Do not respond to long press touch events.",
    "enterDelay": "The number of milliseconds to wait before showing the tooltip.\nThis prop won't impact the enter touch delay (`enterTouchDelay`).",
    "enterNextDelay": "The number of milliseconds to wait before showing the tooltip when one was already recently opened.",
    "enterTouchDelay": "The number of milliseconds a user must touch the element before showing the tooltip.",
    "followCursor": "If `true`, the tooltip follow the cursor over the wrapped element.",
    "id": "This prop is used to help implement the accessibility logic.\nIf you don't provide this prop. It falls back to a randomly generated id.",
    "leaveDelay": "The number of milliseconds to wait before hiding the tooltip.\nThis prop won't impact the leave touch delay (`leaveTouchDelay`).",
    "leaveTouchDelay": "The number of milliseconds after the user stops touching an element before hiding the tooltip.",
    "onClose": "Callback fired when the component requests to be closed.\n\n@param {object} event The event source of the callback.",
    "onOpen": "Callback fired when the component requests to be open.\n\n@param {object} event The event source of the callback.",
    "open": "If `true`, the tooltip is shown.",
    "placement": "Tooltip placement.",
    "PopperComponent": "The component used for the popper.",
    "PopperProps": "Props applied to the [`Popper`](/api/popper/) element.",
    "title": "Tooltip title. Zero-length titles string are never displayed.",
    "TransitionComponent": "The component used for the transition.\n[Follow this guide](/components/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.",
    "TransitionProps": "Props applied to the transition element.\nBy default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition) component."
  },
  "TreeItem": {
    "children": "The content of the component.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "collapseIcon": "The icon used to collapse the node.",
    "ContentComponent": "The component used for the content node.",
    "ContentProps": "Props applied to ContentComponent",
    "disabled": "If `true`, the node is disabled.",
    "endIcon": "The icon displayed next to a end node.",
    "expandIcon": "The icon used to expand the node.",
    "icon": "The icon to display next to the tree node's label.",
    "label": "The tree node label.",
    "nodeId": "The id of the node.",
    "onFocus": "This prop isn't supported.\nUse the `onNodeFocus` callback on the tree if you need to monitor a node's focus.",
    "TransitionComponent": "The component used for the transition.\n[Follow this guide](/components/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.",
    "TransitionProps": "Props applied to the transition element.\nBy default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition) component."
  },
  "TreeView": {
    "children": "The content of the component.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "defaultCollapseIcon": "The default icon used to collapse the node.",
    "defaultEndIcon": "The default icon displayed next to a end node. This is applied to all\ntree nodes and can be overridden by the TreeItem `icon` prop.",
    "defaultExpanded": "Expanded node ids. (Uncontrolled)",
    "defaultExpandIcon": "The default icon used to expand the node.",
    "defaultParentIcon": "The default icon displayed next to a parent node. This is applied to all\nparent nodes and can be overridden by the TreeItem `icon` prop.",
    "defaultSelected": "Selected node ids. (Uncontrolled)\nWhen `multiSelect` is true this takes an array of strings; when false (default) a string.",
    "disabledItemsFocusable": "If `true`, will allow focus on disabled items.",
    "disableSelection": "If `true` selection is disabled.",
    "expanded": "Expanded node ids. (Controlled)",
    "id": "This prop is used to help implement the accessibility logic.\nIf you don't provide this prop. It falls back to a randomly generated id.",
    "multiSelect": "If true `ctrl` and `shift` will trigger multiselect.",
    "onNodeFocus": "Callback fired when tree items are focused.\n\n@param {object} event The event source of the callback **Warning**: This is a generic event not a focus event.\n@param {string} value of the focused node.",
    "onNodeSelect": "Callback fired when tree items are selected/unselected.\n\n@param {object} event The event source of the callback\n@param {(array|string)} value of the selected nodes. When `multiSelect` is true\nthis is an array of strings; when false (default) a string.",
    "onNodeToggle": "Callback fired when tree items are expanded/collapsed.\n\n@param {object} event The event source of the callback.\n@param {array} nodeIds The ids of the expanded nodes.",
    "selected": "Selected node ids. (Controlled)\nWhen `multiSelect` is true this takes an array of strings; when false (default) a string."
  },
  "Typography": {
    "align": "Set the text-align on the component.",
    "children": "The content of the component.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "color": "The color of the component. It supports those theme colors that make sense for this component.",
    "component": "The component used for the root node.\nEither a string to use a HTML element or a component.",
    "display": "Controls the display type",
    "gutterBottom": "If `true`, the text will have a bottom margin.",
    "noWrap": "If `true`, the text will not wrap, but instead will truncate with a text overflow ellipsis.\n\nNote that text overflow can only happen with block or inline-block level elements\n(the element needs to have a width in order to overflow).",
    "paragraph": "If `true`, the text will have a bottom margin.",
    "variant": "Applies the theme typography styles.",
    "variantMapping": "The component maps the variant prop to a range of different HTML element types.\nFor instance, subtitle1 to `<h6>`.\nIf you wish to change that mapping, you can provide your own.\nAlternatively, you can use the `component` prop.\n@default {\n  h1: 'h1',\n  h2: 'h2',\n  h3: 'h3',\n  h4: 'h4',\n  h5: 'h5',\n  h6: 'h6',\n  subtitle1: 'h6',\n  subtitle2: 'h6',\n  body1: 'p',\n  body2: 'p',\n  inherit: 'p',\n}"
  },
  "Unstable_TrapFocus": {
    "children": "A single child content element.",
    "disableAutoFocus": "If `true`, the trap focus will not automatically shift focus to itself when it opens, and\nreplace it to the last focused element when it closes.\nThis also works correctly with any trap focus children that have the `disableAutoFocus` prop.\n\nGenerally this should never be set to `true` as it makes the trap focus less\naccessible to assistive technologies, like screen readers.",
    "disableEnforceFocus": "If `true`, the trap focus will not prevent focus from leaving the trap focus while open.\n\nGenerally this should never be set to `true` as it makes the trap focus less\naccessible to assistive technologies, like screen readers.",
    "disableRestoreFocus": "If `true`, the trap focus will not restore focus to previously focused element once\ntrap focus is hidden.",
    "getDoc": "Return the document to consider.\nWe use it to implement the restore focus between different browser documents.",
    "isEnabled": "Do we still want to enforce the focus?\nThis prop helps nesting TrapFocus elements.",
    "open": "If `true`, focus is locked."
  },
  "Zoom": {
    "appear": "Perform the enter transition when it first mounts if `in` is also `true`.\nSet this to `false` to disable this behavior.",
    "children": "A single child content element.",
    "in": "If `true`, the component will transition in.",
    "timeout": "The duration for the transition, in milliseconds.\nYou may specify a single timeout for all transitions, or individually with an object.\n@default {\n  enter: duration.enteringScreen,\n  exit: duration.leavingScreen,\n}"
  }
}
