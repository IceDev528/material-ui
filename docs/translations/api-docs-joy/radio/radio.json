{
  "componentDescription": "",
  "propDescriptions": {
    "checked": "If <code>true</code>, the component is checked.",
    "checkedIcon": "The icon to display when the component is checked.",
    "className": "Class name applied to the root element.",
    "color": "The color of the component. It supports those theme colors that make sense for this component.",
    "defaultChecked": "The default checked state. Use when the component is not controlled.",
    "disabled": "If <code>true</code>, the component is disabled.",
    "disableIcon": "If <code>true</code>, the checked icon is removed and the selected variant is applied on the <code>action</code> element instead.",
    "label": "The label element at the end the radio.",
    "name": "The <code>name</code> attribute of the input.",
    "onChange": "Callback fired when the state is changed.<br><br><strong>Signature:</strong><br><code>function(event: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; void</code><br><em>event:</em> The event source of the callback. You can pull out the new value by accessing <code>event.target.value</code> (string). You can pull out the new checked state by accessing <code>event.target.checked</code> (boolean).",
    "overlay": "If <code>true</code>, the root element&#39;s position is set to initial which allows the action area to fill the nearest positioned parent. This prop is useful for composing Radio with ListItem component.",
    "readOnly": "If <code>true</code>, the component is read only.",
    "required": "If <code>true</code>, the <code>input</code> element is required.",
    "size": "The size of the component.",
    "sx": "The system prop that allows defining system overrides as well as additional CSS styles. See the <a href=\"/system/getting-started/the-sx-prop/\">`sx` page</a> for more details.",
    "uncheckedIcon": "The icon to display when the component is not checked.",
    "value": "The value of the component. The DOM API casts this to a string.",
    "variant": "The variant to use."
  },
  "classDescriptions": {},
  "slotDescriptions": {
    "action": "The component used to render the action.",
    "icon": "The component used to render the icon.",
    "input": "The component used to render the input.",
    "label": "The component used to render the label.",
    "radio": "The component used to render the radio.",
    "root": "The component used to render the root."
  }
}
