{
  "componentDescription": "<code>InputBase</code> contains as few styles as possible.\nIt aims to be a simple building block for creating an input.\nIt contains a load of style reset and some state logic.",
  "propDescriptions": {
    "autoComplete": "This prop helps users to fill forms faster, especially on mobile devices. The name can be confusing, as it&#39;s more like an autofill. You can learn more about it <a href=\"https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill\">following the specification</a>.",
    "autoFocus": "If <code>true</code>, the <code>input</code> element is focused during the first mount.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "color": "The color of the component. It supports those theme colors that make sense for this component. The prop defaults to the value (<code>&#39;primary&#39;</code>) inherited from the parent FormControl component.",
    "defaultValue": "The default <code>input</code> element value. Use when the component is not controlled.",
    "disabled": "If <code>true</code>, the <code>input</code> element is disabled. The prop defaults to the value (<code>false</code>) inherited from the parent FormControl component.",
    "endAdornment": "End <code>InputAdornment</code> for this component.",
    "error": "If <code>true</code>, the <code>input</code> will indicate an error. The prop defaults to the value (<code>false</code>) inherited from the parent FormControl component.",
    "fullWidth": "If <code>true</code>, the <code>input</code> will take up the full width of its container.",
    "id": "The id of the <code>input</code> element.",
    "inputComponent": "The component used for the <code>input</code> element. Either a string to use a HTML element or a component.<br>⚠️ <a href=\"/guides/composition/#caveat-with-refs\">Needs to be able to hold a ref</a>.",
    "inputProps": "<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes\">Attributes</a> applied to the <code>input</code> element.",
    "inputRef": "Pass a ref to the <code>input</code> element.",
    "margin": "If <code>dense</code>, will adjust vertical spacing. This is normally obtained via context from FormControl. The prop defaults to the value (<code>&#39;none&#39;</code>) inherited from the parent FormControl component.",
    "maxRows": "Maximum number of rows to display when multiline option is set to true.",
    "minRows": "Minimum number of rows to display when multiline option is set to true.",
    "multiline": "If <code>true</code>, a <code>textarea</code> element is rendered.",
    "name": "Name attribute of the <code>input</code> element.",
    "onBlur": "Callback fired when the <code>input</code> is blurred.<br>Notice that the first argument (event) might be undefined.",
    "onChange": "Callback fired when the value is changed.<br><br><strong>Signature:</strong><br><code>function(event: object) =&gt; void</code><br><em>event:</em> The event source of the callback. You can pull out the new value by accessing <code>event.target.value</code> (string).",
    "placeholder": "The short hint displayed in the <code>input</code> before the user enters a value.",
    "readOnly": "It prevents the user from changing the value of the field (not from interacting with the field).",
    "required": "If <code>true</code>, the <code>input</code> element is required. The prop defaults to the value (<code>false</code>) inherited from the parent FormControl component.",
    "rows": "Number of rows to display when multiline option is set to true.",
    "startAdornment": "Start <code>InputAdornment</code> for this component.",
    "type": "Type of the <code>input</code> element. It should be <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types\">a valid HTML5 input type</a>.",
    "value": "The value of the <code>input</code> element, required for a controlled component."
  },
  "classDescriptions": {
    "root": { "description": "Styles applied to the root element." },
    "formControl": {
      "description": "Styles applied to the root element if the component is a descendant of `FormControl`."
    },
    "focused": { "description": "Styles applied to the root element if the component is focused." },
    "disabled": {
      "description": "Styles applied to the root element if {{conditions}}.",
      "conditions": "<code>disabled={true}</code>"
    },
    "adornedStart": {
      "description": "Styles applied to the root element if {{conditions}}.",
      "conditions": "<code>startAdornment</code> is provided"
    },
    "adornedEnd": {
      "description": "Styles applied to the root element if {{conditions}}.",
      "conditions": "<code>endAdornment</code> is provided"
    },
    "error": {
      "description": "Pseudo-class applied to the root element if {{conditions}}.",
      "conditions": "<code>error={true}</code>"
    },
    "marginDense": {
      "description": "Styles applied to the `input` element if {{conditions}}.",
      "conditions": "<code>margin=\"dense\"</code>"
    },
    "multiline": {
      "description": "Styles applied to the root element if {{conditions}}.",
      "conditions": "<code>multiline={true}</code>"
    },
    "colorSecondary": {
      "description": "Styles applied to the root element if the color is secondary."
    },
    "fullWidth": {
      "description": "Styles applied to the root element if {{conditions}}.",
      "conditions": "<code>fullWidth={true}</code>"
    },
    "hiddenLabel": {
      "description": "Styles applied to the root element if {{conditions}}.",
      "conditions": "<code>hiddenLabel={true}</code>"
    },
    "input": { "description": "Styles applied to the `input` element." },
    "inputMarginDense": {
      "description": "Styles applied to the `input` element if {{conditions}}.",
      "conditions": "<code>margin=\"dense\"</code>"
    },
    "inputMultiline": {
      "description": "Styles applied to the `input` element if {{conditions}}.",
      "conditions": "<code>multiline={true}</code>"
    },
    "inputTypeSearch": {
      "description": "Styles applied to the `input` element if {{conditions}}.",
      "conditions": "<code>type=\"search\"</code>"
    },
    "inputAdornedStart": {
      "description": "Styles applied to the `input` element if {{conditions}}.",
      "conditions": "<code>startAdornment</code> is provided"
    },
    "inputAdornedEnd": {
      "description": "Styles applied to the `input` element if {{conditions}}.",
      "conditions": "<code>endAdornment</code> is provided"
    },
    "inputHiddenLabel": {
      "description": "Styles applied to the `input` element if {{conditions}}.",
      "conditions": "<code>hiddenLabel={true}</code>"
    }
  }
}
