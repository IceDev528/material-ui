const fse = require('fs-extra');
const lodash = require('lodash');
const path = require('path');
const { promisify } = require('util');
const webpackCallbackBased = require('webpack');
const yargs = require('yargs');
const createWebpackConfig = require('./webpack.config');

const webpack = promisify(webpackCallbackBased);

const workspaceRoot = path.join(__dirname, '../../');
const snapshotDestPath = path.join(workspaceRoot, 'size-snapshot.json');

/**
 * @param {object} snapshot snapshot generated by rollup-plugin-size-snapshot
 * @returns {object} size snapshot with the same format as a snapshot from size-limit
 */
function normalizeRollupSnapshot(snapshot) {
  return { parsed: snapshot.minified, gzip: snapshot.gzipped };
}

async function getRollupSize(snapshotPath) {
  const rollupSnapshot = await fse.readJSON(snapshotPath);

  return Object.entries(rollupSnapshot).map(([bundlePath, snapshot]) => [
    // path in the snapshot is relative the snapshot itself
    path.relative(workspaceRoot, path.join(path.dirname(snapshotPath), bundlePath)),
    normalizeRollupSnapshot(snapshot),
  ]);
}

/**
 * creates size snapshot for every bundle that built with webpack
 */
async function getWebpackSizes(webpackEnvironment) {
  await fse.mkdirp(path.join(__dirname, 'build'));

  const configurations = await createWebpackConfig(webpack, webpackEnvironment);
  const webpackMultiStats = await webpack(configurations);

  const sizes = [];
  webpackMultiStats.stats.forEach((webpackStats) => {
    if (webpackStats.hasErrors()) {
      const { entrypoints, errors } = webpackStats.toJson({
        all: false,
        entrypoints: true,
        errors: true,
      });
      throw new Error(
        `The following errors occured during bundling of ${Object.keys(
          entrypoints,
        )} with webpack: \n${errors.join('\n')}`,
      );
    }

    const stats = webpackStats.toJson({ all: false, assets: true });
    const assets = new Map(stats.assets.map((asset) => [asset.name, asset]));

    Object.entries(stats.assetsByChunkName).forEach(([chunkName, assetName]) => {
      const parsedSize = assets.get(assetName).size;
      const gzipSize = assets.get(`${assetName}.gz`).size;
      sizes.push([chunkName, { parsed: parsedSize, gzip: gzipSize }]);
    });
  });

  return sizes;
}

async function run(argv) {
  const { analyze, accurateBundles } = argv;

  const rollupBundles = [path.join(workspaceRoot, 'packages/material-ui/size-snapshot.json')];
  const bundleSizes = lodash.fromPairs([
    ...(await getWebpackSizes({ analyze, accurateBundles })),
    ...lodash.flatten(await Promise.all(rollupBundles.map(getRollupSize))),
  ]);

  await fse.writeJSON(snapshotDestPath, bundleSizes, { spaces: 2 });
}

yargs
  .command({
    command: '$0',
    description: 'Saves a size snapshot in size-snapshot.json',
    builder: (command) => {
      return command
        .option('analyze', {
          default: false,
          describe: 'Creates a webpack-bundle-analyzer report for each bundle.',
          type: 'boolean',
        })
        .option('accurateBundles', {
          default: false,
          describe: 'Displays used bundles accurately at the cost of more CPU cycles.',
          type: 'boolean',
        });
    },
    handler: run,
  })
  .help()
  .strict(true)
  .version(false)
  .parse();
