{{=« »=}}
import * as React from 'react';
import { addPropertyControls, ControlType } from 'framer';
import MuiListItem from '@mui/material/ListItem';
import MuiListItemIcon from '@mui/material/ListItemIcon';
import MuiListItemAvatar from '@mui/material/ListItemAvatar';
// import MuiListItemSecondaryAction from '@mui/material/ListItemSecondaryAction';
import MuiListItemText from '@mui/material/ListItemText';
import MuiCheckbox from '@mui/material/Checkbox';
import MuiSwitch from '@mui/material/Switch';
import { Avatar } from './Avatar';
import { Icon } from './Icon';
import { IconButton } from './IconButton';

interface Props {
«& tsInterface»
}

export function «componentName»(props: Props): JSX.Element {
  const {
    button,
    height,
    imageFile,
    imageUrl,
    inset,
    label,
    primaryAction,
    primaryIcon,
    secondaryAction,
    secondaryIcon,
    secondaryLabel,
    width,
    ...other
  } = props;

  let primary = null;
  let secondary = null;

  switch (primaryAction) {
    case 'icon':
      primary = (
        <MuiListItemIcon>
          <Icon icon={primaryIcon} />
        </MuiListItemIcon>
      );
      break;
    case 'avatar':
      primary = (
        <MuiListItemAvatar>
          <Avatar icon={primaryIcon} avatarImageFile={imageFile} avatarImageUrl={imageUrl} />
        </MuiListItemAvatar>
      );
      break;
    case 'checkbox':
      primary = (
        <MuiListItemIcon>
          <MuiCheckbox edge="start" />
        </MuiListItemIcon>
      );
      break;
    default:
      primary = null;
      break;
  }

  switch (secondaryAction) {
    case 'iconButton':
      secondary = <IconButton icon={secondaryIcon} edge="end" />;
      break;
    case 'checkbox':
      secondary = <MuiCheckbox edge="end" />;
      break;
    case 'switch':
      secondary = <MuiSwitch edge="end" />;
      break;
    default:
      secondary = null;
      break;
  }

  return (
    <MuiListItem button={button as any} {...other}>
      {primary}
      <MuiListItemText
        inset={inset}
        primary={label}
        secondary={secondaryLabel.length > 0 ? secondaryLabel : undefined}
      />
      {/* MuiListItemSecondaryAction causes the text to have a bullet. No idea why! */}
      {/* <MuiListItemSecondaryAction> */}
      {secondary}
      {/* </MuiListItemSecondaryAction> */}
    </MuiListItem>
  );
};

«componentName».defaultProps = {
«& defaultProps»
};

addPropertyControls(«componentName», {
«& propertyControls»
});
