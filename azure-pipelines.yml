trigger:
  branches:
    include:
      - 'master'
      - 'next'

schedules:
  - cron: '0 0 * * *'
    displayName: Run with React canary
    branches:
      include:
        - master
        - next
    always: true

# https://developercommunity.visualstudio.com/comments/949241/view.html
pr:
  branches:
    include:
      - '*'

pool:
  vmImage: 'ubuntu-latest'

variables:
  DOCS_NEXT_CACHE_FOLDER: $(Build.SourcesDirectory)/docs/.next/cache
  # azure-pipelines don't support variables per trigger
  # We assume that the only scheduled job we have is for react@next
  ${{ if eq( variables['Build.Reason'], 'Schedule' ) }}:
    # npm dist tag for `react` (https://docs.npmjs.com/cli/dist-tag)
    REACT_DIST_TAG: 'next'
    # Path for artifacts uploaded to S3 that can be used as a permalink
    S3_ARTIFACTS_PATH_PERMA: 'artifacts/$(Build.SourceBranchName)-react-$(REACT_DIST_TAG)/$(Build.SourceVersion)/'
  ${{ if ne( variables['Build.Reason'], 'Schedule' ) }}:
    REACT_DIST_TAG: 'stable'
    # Preserve this path structure since it is locked in various tooling
    S3_ARTIFACTS_PATH_PERMA: 'artifacts/$(Build.SourceBranchName)/$(Build.SourceVersion)/'

jobs:
  - job: sizeSnapshot
    displayName: 'Bundle size monitoring'
    condition: eq(variables['command'], 'sizeSnapshot')
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: '12.x'
        displayName: 'Install Node.js'

      - script: |
          node scripts/use-react-dist-tag.js $(REACT_DIST_TAG)
          yarn install
        displayName: 'install dependencies'
        env:
          # Don't use playwright in this job
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1

      - script: |
          yarn danger ci
        displayName: 'prepare danger on PRs'
        condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))
        env:
          AZURE_BUILD_ID: $(Build.BuildId)
          DANGER_COMMAND: 'prepareBundleSizeReport'
          DANGER_GITHUB_API_TOKEN: $(GITHUB_API_TOKEN)

      - task: Cache@2
        inputs:
          key: 'node-modules-cache | yarn.lock'
          path: node_modules/.cache
        displayName: Cache node_modules/.cache

      - script: |
          yarn lerna run --ignore @material-ui/icons --parallel --scope "@material-ui/*" build
        displayName: 'build @material-ui packages'

      - script: |
          cd packages/material-ui/build
          npm version 0.0.0-canary.$(Build.SourceVersion) --no-git-tag-version
          npm pack
          mv material-ui-core-0.0.0-canary.$(Build.SourceVersion).tgz ../../../material-ui-core.tgz
        displayName: 'create @material-ui/core canary distributable'

      - task: S3Upload@1
        inputs:
          regionName: 'eu-central-1'
          bucketName: 'eps1lon-material-ui'
          globExpressions: '*.tgz'
          targetFolder: $(S3_ARTIFACTS_PATH_PERMA)
          filesAcl: 'public-read'
        displayName: 'Upload distributables to S3'
        condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
        env:
          AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
          AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)

      - task: PublishPipelineArtifact@1
        inputs:
          artifactName: 'canaries'
          targetPath: 'material-ui-core.tgz'

      - script: |
          yarn size:snapshot
        displayName: 'create a size snapshot'

      - task: PublishPipelineArtifact@1
        displayName: 'persist size snapshot as pipeline artifact'
        inputs:
          artifactName: 'size-snapshot'
          targetPath: 'size-snapshot.json'

      - task: AmazonWebServices.aws-vsts-tools.S3Upload.S3Upload@1
        displayName: 'persist size snapshot on S3'
        condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
        inputs:
          awsCredentials: 's3 artifacts'
          regionName: 'eu-central-1'
          bucketName: 'eps1lon-material-ui'
          sourceFolder: '$(System.DefaultWorkingDirectory)'
          globExpressions: 'size-snapshot.json'
          targetFolder: $(S3_ARTIFACTS_PATH_PERMA)
          filesAcl: 'public-read'
          contentType: application/json
          logRequest: true
          logResponse: true

      - task: AmazonWebServices.aws-vsts-tools.S3Upload.S3Upload@1
        displayName: 'symlink size-snapshot to latest'
        condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'), ne(variables['Build.Reason'], 'Schedule'))
        inputs:
          awsCredentials: 's3 artifacts'
          regionName: 'eu-central-1'
          bucketName: 'eps1lon-material-ui'
          sourceFolder: '$(System.DefaultWorkingDirectory)'
          globExpressions: 'size-snapshot.json'
          targetFolder: 'artifacts/$(Build.SourceBranchName)/latest/'
          filesAcl: 'public-read'
          contentType: application/json
          logRequest: true
          logResponse: true

      - script: |
          yarn danger ci
        displayName: 'run danger on PRs'
        condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))
        env:
          AZURE_BUILD_ID: $(Build.BuildId)
          DANGER_COMMAND: 'reportBundleSize'
          DANGER_GITHUB_API_TOKEN: $(GITHUB_API_TOKEN)

  - job: benchmark
    displayName: 'Performance monitoring'
    condition: eq(variables['command'], 'benchmark')
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: '12.x'
        displayName: 'Install Node.js'

      # From https://github.com/GoogleChrome/puppeteer/blob/811415bc8c47f7882375629b57b3fe186ad61ed4/docs/troubleshooting.md#chrome-headless-doesnt-launch
      - script: |
          sudo apt-get update
          sudo apt-get install -y --force-yes gconf-service libasound2 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget
        displayName: 'Install dependencies for Chrome Headless'

      - script: yarn install
        displayName: 'install dependencies'

      - script: yarn benchmark:browser
        displayName: 'yarn benchmark:browser'

      - task: PublishPipelineArtifact@1
        displayName: 'Publish benchmark results as a pipeline artifact.'
        inputs:
          artifactName: 'benchmarks'
          targetPath: 'tmp/benchmarks'
